<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 NoticeBoard 迅捷而优雅地发布通知</title>
      <link href="/blog/2018-07-30-noticeboard/"/>
      <url>/blog/2018-07-30-noticeboard/</url>
      
        <content type="html"><![CDATA[<p>Android 有原生的 <a href="http://wiki.jikexueyuan.com/project/material-design/components/snackbars-and-toasts.html" rel="external nofollow noopener noreferrer" target="_blank">SnackBar</a> ，iOS 没有与之相似的原生控件，GitHub 上好像也没有找到特别好用的开源库。</p><p>既然在 Android 平台上能够作为原生控件存在，足以说明这种需求不算太不小众，在 iOS 端，类似的需求可能被 UIAlertController、MBProgressHUD 来替代，但是他们都需要打断用户当前正在进行的事情，体验很不好。GitHub 上有一个开源库 NoticeBar ，模仿QQ的实现效果，虽然有200+的Star，个人感觉 UI 和可定制性都不够理想，于是自己写了一个模仿系统原生通知样式的易于定制的 <strong><a href="https://github.com/xaoxuu/NoticeBoard" rel="external nofollow noopener noreferrer" target="_blank">NoticeBoard</a></strong>，下面请看截图和演示效果：</p><a id="more"></a><table><thead><tr><th>screenshot</th><th>video</th></tr></thead><tbody><tr><td><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/posts/2018/e131748c622a8cfce18cb9dfe32daf3783efc4.png" alt=""></td><td><video id="video" controls preload="none" poster="https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/posts/2018/e131748c622a8cfce18cb9dfe32daf3783efc4.png" width="100%"><source id="mp4" src="https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/posts/2018/658012e260a085f1789d7037ad596706b1cfeb.mp4" type="video/mp4"></video></td></tr></tbody></table><p>NoticeBoard 的功能定位是应用内消息控件，相对于系统通知，它显而易见的优点是：<strong>简单易用</strong>、<strong>可定制性强</strong>，相对于原生的 UIAlertController 和开源的 MBProgressHUD ，它的优点是专为这种特定场景而生：<strong>只需要告诉用户发生了什么，不必立即处理</strong>，或者可以 <strong>稍后再处理</strong>。</p><h2 id="演示如何使用"><a href="#演示如何使用" class="headerlink" title="演示如何使用"></a>演示如何使用</h2><p>强烈建议感兴趣的朋友亲自下载 <a href="https://github.com/xaoxuu/NoticeBoard" rel="external nofollow noopener noreferrer" target="_blank">源码</a> 运行 <code>Example</code> 项目，因为项目中提供了大量的演示程序，通过这些演示你可以清楚地了解到使用方法及其效果。</p><h2 id="导入-NoticeBoard"><a href="#导入-NoticeBoard" class="headerlink" title="导入 NoticeBoard"></a>导入 NoticeBoard</h2><p>如果要在工程项目中使用NoticeBoard，需要在 <code>Podfile</code> 中添加这一行：<br></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'NoticeBoard'</span></span><br></pre></td></tr></table></figure><p></p><h2 id="快速-post-示例"><a href="#快速-post-示例" class="headerlink" title="快速 post 示例"></a>快速 post 示例</h2><p>最简单的，你可以直接发送一条 “Hello World!” ：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NoticeBoard</span>.post(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure><p>用户可以像移除系统原生通知那样拖拽一条通知往上方移动丢出屏幕外，如果你希望消息自动消失，需要传入消息的持续时间：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NoticeBoard</span>.post(<span class="string">"Hello World!"</span>, duration: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>或者直接发出一条警告消息：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NoticeBoard</span>.post(.warning, title: <span class="string">"电量过低"</span>, message: <span class="string">"电量不足10%，请及时给设备充电。"</span>, duration: <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="标准-post-步骤"><a href="#标准-post-步骤" class="headerlink" title="标准 post 步骤"></a>标准 post 步骤</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建notice</span></span><br><span class="line"><span class="keyword">let</span> notice = <span class="type">Notice</span>.<span class="keyword">init</span>(title: <span class="string">"标题"</span>, icon: <span class="type">UIImage</span>.<span class="keyword">init</span>(named: <span class="string">"alert-"</span>), body: <span class="string">"正文"</span>)</span><br><span class="line"><span class="comment">// 设置notice</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 发布notice       </span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.post(notice, duration: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>设置notice</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按钮事件</span></span><br><span class="line">notice.actionButtonDidTapped &#123; (notice, btn) <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"点击了'→'按钮"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置颜色主题</span></span><br><span class="line">notice.themeColor = .<span class="keyword">init</span>(red: <span class="number">0.2</span>, green: <span class="number">0.3</span>, blue: <span class="number">0.4</span>, alpha: <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 模糊背景（暂时只支持iOS11，在之前的系统会自动改为纯色背景），和纯色背景可以同时使用</span></span><br><span class="line">notice.blurEffectStyle = .light</span><br></pre></td></tr></table></figure><p>还有更多设置，例如：警示（alert）、禁止被用户通过手势移除、设置正文最大高度等，详见 <a href="https://xaoxuu.com/wiki/noticeboard/">文档</a> 。</p><p>移除通知</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移除某个通知</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.remove(notice)</span><br><span class="line"><span class="comment">// 清空</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.clean()</span><br></pre></td></tr></table></figure><h2 id="post-进度"><a href="#post-进度" class="headerlink" title="post 进度"></a>post 进度</h2><p>设置任意一条 <code>notice</code> 实例的 <code>progress</code> 属性，即时生效。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 进度为0</span></span><br><span class="line">notice.progress = <span class="number">0</span></span><br><span class="line"><span class="comment">// 进度为50%</span></span><br><span class="line">notice.progress = <span class="number">0.5</span></span><br><span class="line"><span class="comment">// 进度为100%</span></span><br><span class="line">notice.progress = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="post-自定义-view"><a href="#post-自定义-view" class="headerlink" title="post 自定义 view"></a>post 自定义 view</h2><p>NoticeBoard 开源库提供了极大的自由度，你可以只享受 NoticeBoard 提供的对 Notice 管理策略（post、remove、手势、过渡动画），而不使用现有的 Notice 的默认 UI，做法就是创建一个空白的 Notice 实例，添加自定义的视图。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notice = <span class="type">Notice</span>()</span><br><span class="line">notice.rootViewController?.view.addSubview(myView)</span><br><span class="line"><span class="type">NoticeBoard</span>.post(notice)</span><br></pre></td></tr></table></figure><blockquote><p>根据这一特性，你可以继承 Notice ，重写初始化方法， 从而创建符合公司内部 UI 要求的 Notice 。</p></blockquote><h2 id="多个通知的布局"><a href="#多个通知的布局" class="headerlink" title="多个通知的布局"></a>多个通知的布局</h2><p>如果同一时间需要存在多个通知，可以根据使用场景选择不同的布局方式：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 平铺，默认（所有通知都可见，但是通知过多会超出屏幕）</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.layoutStyle = .tile</span><br><span class="line"><span class="type">NoticeBoard</span>.shared.post(notice, duration: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取代旧的通知（旧的采用fade动画淡出）</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.layoutStyle = .replace</span><br><span class="line"><span class="type">NoticeBoard</span>.shared.post(notice, duration: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除旧的通知（旧的采用moveout动画移出屏幕）</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.layoutStyle = .remove</span><br><span class="line"><span class="type">NoticeBoard</span>.shared.post(notice, duration: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 覆盖在旧的通知上层（切勿堆积过多）</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.layoutStyle = .overlay</span><br><span class="line"><span class="type">NoticeBoard</span>.shared.post(notice, duration: <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 堆叠（最新的通知会遮挡旧的通知）</span></span><br><span class="line"><span class="type">NoticeBoard</span>.shared.layoutStyle = .stack</span><br><span class="line"><span class="type">NoticeBoard</span>.shared.post(notice, duration: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="设置Level"><a href="#设置Level" class="headerlink" title="设置Level"></a>设置Level</h2><p>默认提供了四种level：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// case low = 4000</span></span><br><span class="line"><span class="comment">// case normal = 4100</span></span><br><span class="line"><span class="comment">// case high = 4200</span></span><br><span class="line"><span class="comment">// case veryHigh = 4300</span></span><br><span class="line">notice.level = .normal</span><br></pre></td></tr></table></figure><p>也可以直接设置任意数值：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notice.windowLevel = <span class="number">1000</span></span><br></pre></td></tr></table></figure><h2 id="在Swift和Objective-C中使用"><a href="#在Swift和Objective-C中使用" class="headerlink" title="在Swift和Objective-C中使用"></a>在Swift和Objective-C中使用</h2><p>NoticeBoard使用<code>Swift4.1</code>语言编写，如需在<code>Objective-C</code>项目中使用，可以采用<code>Objective-C</code>和<code>Swift</code>混编的方式。</p><h2 id="源码和文档链接"><a href="#源码和文档链接" class="headerlink" title="源码和文档链接"></a>源码和文档链接</h2><p>如果你觉得有用，请前往GitHub点个赞支持。</p><blockquote><p>项目源码：<a href="https://github.com/xaoxuu/NoticeBoard" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xaoxuu/NoticeBoard</a><br>开发文档：<a href="https://xaoxuu.com/wiki/noticeboard/">https://xaoxuu.com/wiki/noticeboard</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 开源库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理混乱不堪的各国语言翻译</title>
      <link href="/blog/2017-12-25-merge-localizable-strings/"/>
      <url>/blog/2017-12-25-merge-localizable-strings/</url>
      
        <content type="html"><![CDATA[<p>linksmart项目截止目前已经支持了17个国家的语言，从诞生到现在也已经经历了很多程序员的修改和维护，代码已经变得十分混乱。因为公司一直在接新的定制项目，所以也没有时间进行一次彻底的重构，只能在维护某方面的BUG的时候，对相关代码进行局部重构。现在的情况是：</p><ul><li>同一个文本有些语言有翻译，有些语言没有翻译。</li><li>有些需要使用缩进的地方，由于某种原因，并没有使用<code>UIEdgeInsets</code>进行缩进，而是在文本前后加空格。(⊙﹏⊙)b</li></ul><a id="more"></a><h2 id="整理思路"><a href="#整理思路" class="headerlink" title="整理思路"></a>整理思路</h2><p>首先必须得找出一种合适的方法维护这些Localizable.strings，在Excel里做一个总表，增加语言的时候，可以直接把英文的一列发给客户进行翻译。最大的优势是：随时可以用脚本把Excel里的所有语言导出成项目支持的Localizable.strings文件，极大提高效率。</p><h2 id="1-补全"><a href="#1-补全" class="headerlink" title="1. 补全"></a>1. 补全</h2><p>使用<code>genstrings</code>命令将所有.m文件中的LocalizedString文本生成Localizable.strings。<br>打开终端，进入项目根目录，执行以下命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> ./ -name <span class="string">"*.m"</span> -print0 | xargs -0 genstrings -o en.lproj</span><br></pre></td></tr></table></figure><p>生成的这一份文件只包含所有.m文件中的国际化字符串，并不包含plist和xib中的字符串。接下来只要把这一份和原来的所有翻译合并起来去重，就得到一份最全的key。</p><h2 id="2-合并去重"><a href="#2-合并去重" class="headerlink" title="2. 合并去重"></a>2. 合并去重</h2><p>我尝试过直接读取Localizable.strings文件，但提示编码错误，就暂时copy到txt文件中进行处理。</p><blockquote><p>合并的Demo：<a href="https://github.com/xaoxuu/LocalizedTool-iOS" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xaoxuu/LocalizedTool-iOS</a></p></blockquote><h2 id="3-导入Excel"><a href="#3-导入Excel" class="headerlink" title="3. 导入Excel"></a>3. 导入Excel</h2><p>接下来的步骤工作量有点大，就是重新把那些翻译导入Excel中，补全缺少的那些翻译。</p><blockquote><p>导入Excel和从Excel导出为Localizable.strings的方法在这里：<a href="https://xaoxuu.com/blog/2017-03-08-ios-localizable-string">https://xaoxuu.com/blog/2017-03-08-ios-localizable-string</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 推迟而不重复执行函数</title>
      <link href="/blog/2017-11-09-gcd-delay/"/>
      <url>/blog/2017-11-09-gcd-delay/</url>
      
        <content type="html"><![CDATA[<p>如果你想推迟执行一段代码，使用<code>dispatch_after</code>函数可以轻易实现，但有时候我们想在它delay的期间再次delay，直到最终不再delay的时候，才真正的被调用一次。这就需要每次先将旧的事件取消，然后重新设置delay。</p><a id="more"></a><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p><strong>自动消失的视图</strong></p><p>例如当用户的某种操作点击一下屏幕就发出一条状态栏消息，消息在2秒后消失，在消失前如果用户又触发了这个条件，理应是在这次触发的2秒后消失，如果简单的使用<code>dispatch_after</code>函数进行延迟，结果会是在第一次点击的2秒后消失，可能你在1.5秒的时候又点击了一下，但是只过了0.5秒就消失了。</p><p><strong>降低服务器访问次数</strong></p><p>例如：用户修改了信息的30秒后上传至服务器。那么如果用户修改了姓名，然后30秒内又修改了头像，在修改了头像后的30秒内又修改了性别等等。我们希望的并不是每次修改就上传一次，而是在用户最后修改完所有信息之后，看起来似乎不准备继续修改了的时候，再上传至服务器。使用推迟而不重复执行的方法可以在避免多次访问服务器的同时及时地上传用户修改后的信息。</p><p><strong>AXKitDemo</strong></p><p>为了方便大家理解，我在Demo中做了这样一个页面，点击屏幕的时候计数器会增加，意味着收到某种需要处理的用户交互信息，2秒后作出回应（发出状态栏消息）。如果2秒内用户重复点击屏幕，那么这个回应会继续被推迟，直到某个连续的2秒没有收到任何输入，这时候才作出一次响应。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://user-images.githubusercontent.com/16400144/32600845-db7e9798-c57b-11e7-9111-81f7a4925e4d.png" alt=""></p><p>实现的方法很简单，步骤如下：</p><ol><li>获取到函数</li><li>取消函数</li><li>重新赋值或启动</li></ol><h2 id="使用Objective-C"><a href="#使用Objective-C" class="headerlink" title="使用Objective-C"></a>使用Objective-C</h2><p>在Objective-C中，将要执行的代码保存成<code>dispatch_block_t</code>的静态类型变量，取出这个静态变量，然后使用<code>dispatch_block_cancel()</code>取消，然后重新设置它的值，然后调用<code>dispatch_after</code>。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)delayTest&#123;</span><br><span class="line">    <span class="keyword">static</span> dispatch_block_t task;</span><br><span class="line">    <span class="keyword">if</span> (task) &#123;</span><br><span class="line">        dispatch_block_cancel(task);</span><br><span class="line">    &#125;</span><br><span class="line">    task = dispatch_block_create(DISPATCH_BLOCK_BARRIER, ^&#123;</span><br><span class="line">        <span class="comment">// 被推迟执行的代码</span></span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(duration * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), task);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="也可以使用AXKit实现"><a href="#也可以使用AXKit实现" class="headerlink" title="也可以使用AXKit实现"></a>也可以使用AXKit实现</h3><p>也可以使用 <a href="https://github.com/xaoxuu/AXKit/" rel="external nofollow noopener noreferrer" target="_blank">AXKit</a> 封装好的方法，将要执行的代码保存成<code>ax_dispatch_operation_t</code>的静态类型变量，使用<code>ax_dispatch_cancel_operation()</code>取消之前的任务，然后使用<code>ax_dispatch_cancellable()</code>再次赋值。</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)delayTest2&#123;</span><br><span class="line">    <span class="keyword">static</span> ax_dispatch_operation_t animationToken;</span><br><span class="line">    ax_dispatch_cancel_operation(animationToken);</span><br><span class="line">    animationToken = ax_dispatch_cancellable(duration, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="comment">// 被推迟执行的代码</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用Swift"><a href="#使用Swift" class="headerlink" title="使用Swift"></a>使用Swift</h2><p>创建静态变量<code>static var task = DispatchWorkItem.init{}</code>，先取消<code>task.cancel()</code>，再赋值<code>DispatchWorkItem</code>，然后使用<code>DispatchQueue.main.asyncAfter(deadline: .now() + duration, execute: task)</code>延迟调用。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">var</span> task = <span class="type">DispatchWorkItem</span>.<span class="keyword">init</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">hide</span><span class="params">(duration: TimeInterval)</span></span> &#123;</span><br><span class="line">    task.cancel()</span><br><span class="line">    task = <span class="type">DispatchWorkItem</span>.<span class="keyword">init</span>(block: &#123;</span><br><span class="line">        <span class="comment">// 被推迟执行的代码</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="type">DispatchQueue</span>.main.asyncAfter(deadline: .now() + duration, execute: task)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
            <tag> objc </tag>
            
            <tag> GCD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AXChartView 一个简单而漂亮的图表工具类</title>
      <link href="/blog/2017-09-14-chartview/"/>
      <url>/blog/2017-09-14-chartview/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/posts/2017/5da30e66c4dbd6335d4f77f5aa789174bab926.png" alt=""></p><p>简单美观的统计图表，真的只有一个类！</p><a id="more"></a><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><ul><li>下载地址： <a href="https://github.com/xaoxuu/AXChartView/" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xaoxuu/AXChartView/</a></li></ul><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">AXChartView *v1 = [[AXChartView alloc] initWithFrame:<span class="built_in">CGRectMake</span>(<span class="number">16</span>, <span class="number">28</span>, <span class="keyword">self</span>.view.frame.size.width - <span class="number">32</span>, <span class="number">200</span>)];</span><br><span class="line">[<span class="keyword">self</span>.view addSubview:v1];</span><br><span class="line"><span class="keyword">self</span>.v1 = v1;</span><br><span class="line">v1.dataSource = <span class="keyword">self</span>;</span><br><span class="line">v1.delegate = <span class="keyword">self</span>;</span><br><span class="line"><span class="comment">// 标题</span></span><br><span class="line">v1.title = <span class="string">@"AXChartView"</span>;</span><br><span class="line"><span class="comment">// 线条粗细，默认为1</span></span><br><span class="line">v1.lineWidth = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 平滑指数，默认为0，折线图</span></span><br><span class="line">v1.smoothFactor = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 强调色，默认为灰色</span></span><br><span class="line">v1.accentColor = [<span class="built_in">UIColor</span> orangeColor];</span><br></pre></td></tr></table></figure><h2 id="设置数据源"><a href="#设置数据源" class="headerlink" title="设置数据源"></a>设置数据源</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 总列数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @return 总列数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)chartViewItemsCount&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 第index列的值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param index 列索引</span></span><br><span class="line"><span class="comment"> @return 第index列的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)chartViewValueForIndex:(<span class="built_in">NSUInteger</span>)index&#123;</span><br><span class="line">    <span class="keyword">return</span> @(arc4random_uniform(<span class="number">20000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 第index列的标题</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param index 列索引</span></span><br><span class="line"><span class="comment"> @return 第index列的标题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)chartViewTitleForIndex:(<span class="built_in">NSUInteger</span>)index&#123;</span><br><span class="line">    <span class="keyword">return</span> @(index+<span class="number">1</span>).stringValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每多少天显示一个列标题(当列数很多的时候用)</span></span><br><span class="line">- (<span class="built_in">NSInteger</span>)chartViewShowTitleForIndexWithSteps&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 右上角的摘要文字</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)chartViewSummaryText:(<span class="built_in">UILabel</span> *)label&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"haha"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渐变的背景色</span></span><br><span class="line">- (<span class="keyword">void</span>)chartViewWillSetGradientLayer:(<span class="built_in">CAGradientLayer</span> *)gradientLayer&#123;</span><br><span class="line">    [gradientLayer setColors:@[(<span class="keyword">id</span>)[<span class="built_in">UIColor</span> colorWithRed:<span class="number">248</span>/<span class="number">255.0</span> green:<span class="number">207</span>/<span class="number">255.0</span> blue:<span class="number">54</span>/<span class="number">255.0</span> alpha:<span class="number">1.00</span>].CGColor, (<span class="keyword">id</span>)[<span class="built_in">UIColor</span> colorWithRed:<span class="number">253</span>/<span class="number">255.0</span> green:<span class="number">166</span>/<span class="number">255.0</span> blue:<span class="number">65</span>/<span class="number">255.0</span> alpha:<span class="number">1.00</span>].CGColor]];</span><br><span class="line">    [gradientLayer setStartPoint:<span class="built_in">CGPointMake</span>(<span class="number">0</span>, <span class="number">0</span>)];</span><br><span class="line">    [gradientLayer setEndPoint:<span class="built_in">CGPointMake</span>(<span class="number">1</span>, <span class="number">1</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 图表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 命令及客户端的详细使用</title>
      <link href="/blog/2017-08-24-git/"/>
      <url>/blog/2017-08-24-git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>git教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="external nofollow noopener noreferrer" target="_blank">廖雪峰的git教程</a> 、 <a href="https://www.yiibai.com/git/" rel="external nofollow noopener noreferrer" target="_blank">git教程</a> 。</p></blockquote><h2 id="Git与SVN的区别"><a href="#Git与SVN的区别" class="headerlink" title="Git与SVN的区别"></a>Git与SVN的区别</h2><ul><li>git是分布式版本控制系统，SVN是集中式版本控制系统。详见： <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374027586935cf69c53637d8458c9aec27dd546a6cd6000" rel="external nofollow noopener noreferrer" target="_blank">集中式vs分布式 </a>。</li><li>git把内容按元数据方式存储，而SVN是按文件。</li><li>git版本库可以离线查看所有log，可以离线提交，而SVN不可以。</li><li>……更多区别详见： <a href="https://www.jianshu.com/p/bfec042349ca" rel="external nofollow noopener noreferrer" target="_blank">Svn与Git的区别</a> 。</li></ul><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><p>SVN</p><ol><li>update（将远程版本库代码更新到本地）</li><li>commit（将本地代码提交到远程版本库）</li></ol><p>git</p><ol><li>commit（将本地代码提交到远程版本库）</li><li>fetch（将远程版本库的改动下载到本地（未合并））</li><li>merge（合并两个分支（本地、远程））</li><li>push（将最新的版本库同步到远程服务器）</li></ol><p>显而易见：SVN的操作简单明了，git学习成本比SVN高一点。但是由于git是分布式的，所以不需要联网就可以将代码改动立即提交。提交到本地版本库之后，本地和远程的版本就不一样了，因此需要fetch、merge、push来同步版本库。</p><p>那么这点区别有什么意义呢？将代码提交到版本库里就有了记录，就可以查询可以恢复，相当于游戏的存档，而与远程服务器的交互因为需要网络，就有很大的不稳定因素，可能会失败，相当于游戏的打BOSS。SVN是将存档和打BOSS绑定到了一起，要打了BOSS后才可以存档进度；而git由于版本库在本地，所以随时随地可以存档，并且要求打BOSS前必须存档。</p><p>使用git最大的感触就是<strong>安全</strong>（故障率低、易恢复）、<strong>速度快</strong>。</p><a id="more"></a><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><h3 id="git-clone-克隆版本库"><a href="#git-clone-克隆版本库" class="headerlink" title="git clone 克隆版本库"></a>git clone 克隆版本库</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/xaoxuu/AXKit.git</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/xaoxuu/AXKit.git AXKit</span><br></pre></td></tr></table></figure><h3 id="git-ignore-配置"><a href="#git-ignore-配置" class="headerlink" title="git ignore 配置"></a>git ignore 配置</h3><p>要忽略某些文件的改动需要配置<code>.gitignore</code>文件：</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># 这是macOS文件夹属性的隐藏文件，不需要同步到git</span></span><br><span class="line">.DS_Store</span><br><span class="line"></span><br><span class="line"><span class="meta"># 某个文件夹不想要同步到git</span></span><br><span class="line">/<span class="keyword">public</span></span><br><span class="line">/node_modules</span><br><span class="line"></span><br><span class="line"><span class="meta"># 某个文件不想要同步到git</span></span><br><span class="line">test.txt</span><br><span class="line"></span><br><span class="line"><span class="meta"># 通配符</span></span><br><span class="line">._*</span><br></pre></td></tr></table></figure><h2 id="日常操作"><a href="#日常操作" class="headerlink" title="日常操作"></a>日常操作</h2><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把所有改动添加到版本库</span></span><br><span class="line">git <span class="keyword">add</span><span class="bash"> --all</span></span><br></pre></td></tr></table></figure><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">'message'</span></span><br><span class="line"><span class="comment"># 注意，如果message没有空格的话，可以不加引号，言简意赅又节省时间。</span></span><br></pre></td></tr></table></figure><h3 id="pull-push"><a href="#pull-push" class="headerlink" title="pull/push"></a>pull/push</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 更新所有分支</span></span><br><span class="line">git fetch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将dev分支合并到当前分支</span></span><br><span class="line">git merge dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将更新后的本地分支同步到远程</span></span><br><span class="line">git push origin</span><br></pre></td></tr></table></figure><h2 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h2><p>我一般使用Tower客户端操作，pull之后有冲突的文件会列出来。建议使用一个比较好的编辑器如 <a href="http://atom.io" rel="external nofollow noopener noreferrer" target="_blank">Atom</a> ，有冲突的部分会用两种颜色高亮。</p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>如果冲突文件没有妥善解决就提交到版本库导致严重后果，或者需要看到某个历史时刻的代码，都可以使用：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line"><span class="meta"># 查看提交记录</span></span><br></pre></td></tr></table></figure><p>然后copy某个commit id，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> [<span class="keyword">commit</span> <span class="keyword">id</span>]</span><br><span class="line"># 默认是soft，回到某个<span class="keyword">commit</span>，而当前的代码依然在，处于未<span class="keyword">commit</span>的状态。</span><br><span class="line"></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard [commit id]</span></span><br><span class="line"># 彻底回到某个<span class="keyword">commit</span>，完全回到那个时刻的状态。</span><br></pre></td></tr></table></figure><h2 id="版本迭代"><a href="#版本迭代" class="headerlink" title="版本迭代"></a>版本迭代</h2><h3 id="分支branch"><a href="#分支branch" class="headerlink" title="分支branch"></a>分支branch</h3><p>查看当前所有分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git branch</span></span><br></pre></td></tr></table></figure><p>新建并切换到新的分支dev</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -<span class="selector-tag">b</span> dev</span><br></pre></td></tr></table></figure><p>仅仅切换到dev分支</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git checkout dev</span></span><br></pre></td></tr></table></figure><p>dev分支push到远程</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> dev</span><br></pre></td></tr></table></figure><p>删除分支（dev）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除本地分支</span></span><br><span class="line">git branch -d dev</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法一：将空白分支覆盖到远程dev分支</span></span><br><span class="line">git push origin :dev</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：执行删除命令</span></span><br><span class="line">git push origin --delete dev</span><br></pre></td></tr></table></figure><h3 id="标签tag"><a href="#标签tag" class="headerlink" title="标签tag"></a>标签tag</h3><p>标签本质上和分支一样，适用于分支的操作也同样适用于标签，有区别的是：</p><p>查看所有tag</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span></span><br></pre></td></tr></table></figure><p>把当前HEAD打个tag（名为：1.0）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">1</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 也可以添加备注信息，如同commit</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">1</span>.<span class="number">0</span> -m 'message'</span><br></pre></td></tr></table></figure><p>切换到某个tag（1.0）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">git</span> <span class="selector-tag">checkout</span> 1<span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><p>push到远程</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">push</span>所有未<span class="built_in">push</span>的tag</span><br><span class="line">git <span class="built_in">push</span> --tags</span><br><span class="line"># <span class="built_in">push</span>指定的tag</span><br><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> <span class="number">1.0</span></span><br></pre></td></tr></table></figure><p>删除tag（1.0）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 删除本地tag</span></span><br><span class="line">git tag -d 1.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程tag</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法一：将空白tag覆盖到远程tag</span></span><br><span class="line">git push origin :1.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方法二：执行删除命令</span></span><br><span class="line">git push origin --delete 1.0</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="Stash功能"><a href="#Stash功能" class="headerlink" title="Stash功能"></a>Stash功能</h3><ul><li>save：将当前未commit的代码保存到stash，并且回到上次commit的状态。</li><li>apply：应用某个stash的代码。</li></ul><h3 id="Git-Flow功能"><a href="#Git-Flow功能" class="headerlink" title="Git-Flow功能"></a>Git-Flow功能</h3><p>自动化管理功能，例如准备开发2.0版本的时候：<br>点击Start Release，客户端会自动新建一个release分支。</p><p>准备增加一个新特性的时候：<br>点击Start Feature，客户端会新建一个feature分支。</p><p>需要修复bug的时候：<br>点击Start Hotfix，客户端会新建一个fix分支。</p><p>当修复完bug，点击Finish Hotfix的时候，客户端会自动把fix分支合并到创建它的分支，并且创建一个tag。<br>当一个新特性开发完成，点击Finish Feature的时候，客户端会自动把feature分支合并到创建它的分支，并且创建一个tag。<br>当一个新版本开发完成，点击Finish Release的时候，客户端会自动把release分支合并到创建它的分支，并且创建一个tag。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何搭建基于 Hexo 的独立博客</title>
      <link href="/blog/2017-07-05-hexo-blog/"/>
      <url>/blog/2017-07-05-hexo-blog/</url>
      
        <content type="html"><![CDATA[<p>如果你的电脑是 macOS 系统，又比较懒，你可以选择使用下面这行脚本命令全程自动化完成，下面文章就可以不用看了。</p><p>打开终端，cd 到你想创建博客的地方，执行这一行命令：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O <span class="string">'https://raw.githubusercontent.com/xaoxuu/hexo.sh/master/hexo.sh'</span> -<span class="comment"># &amp;&amp; chmod 777 hexo.sh &amp;&amp; . hexo.sh -i init</span></span><br></pre></td></tr></table></figure><p></p><p>当然，如果你想知其所以然，最好还是看一下本文。</p><a id="more"></a><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo依赖Node.js和git。如果电脑上没有node环境可以去 <a href="https://nodejs.org/en/#download" rel="external nofollow noopener noreferrer" target="_blank">Nodejs官网</a> 下载，或者在这里直接下载 <a href="https://nodejs.org/dist/v6.11.0/node-v6.11.0.pkg" rel="external nofollow noopener noreferrer" target="_blank">node-v6.11.0.pkg</a> 。安装完成可以查看版本，在终端输入：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure><p>当看到如下信息时，说明已经安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/a3/bea52e43c85f90d8cf7c73c1fca014f0c0a631.png" alt=""></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>macOS自带git，可以跳过此步骤。</p><ul><li>Windows: Download &amp; install <a href="https://git-scm.com/download/win" rel="external nofollow noopener noreferrer" target="_blank">git</a>.</li><li>Mac: Install it with <a href="https://mxcl.github.io/homebrew" rel="external nofollow noopener noreferrer" target="_blank">Homebrew</a>, <a href="https://www.macports.org" rel="external nofollow noopener noreferrer" target="_blank">MacPorts</a> or <a href="http://sourceforge.net/projects/git-osx-installer/" rel="external nofollow noopener noreferrer" target="_blank">installer</a>.</li><li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li><li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li></ul><h3 id="安装Command-Line-Tools"><a href="#安装Command-Line-Tools" class="headerlink" title="安装Command Line Tools"></a>安装Command Line Tools</h3><p>macOS需要安装Command Line Tools，Windows可以跳过这一步骤。在终端输入：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xcode-<span class="keyword">select</span> <span class="comment">--install</span></span><br></pre></td></tr></table></figure><p>然后会弹出一个提示框：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/d0/e8212c69f3e7c6dc7c8d1a2e8318fae8caa4fa.png" alt=""></p><p>点击<code>Install</code>安装。</p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在终端输入：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><p>如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/c7/1d773ecdcf61e92fdf5793a4cbe2847d81384e.png" alt=""></p><p>如果安装失败，显示这样的信息如图：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/64/86ebbcf2753490e07dda6845e0df494dcebe32.png" alt=""></p><p>则需要以管理员身份运行，在终端输入：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo-<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure><p>看到这个结果就表明安装成功了：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/cf/9437908b6f1e3c7d98fcbea9ec9c73f918805a.png" alt=""></p><h2 id="开始创作"><a href="#开始创作" class="headerlink" title="开始创作"></a>开始创作</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span><span class="keyword">install</span></span><br><span class="line"><span class="keyword">hexo </span>server</span><br></pre></td></tr></table></figure><h3 id="选择一个主题"><a href="#选择一个主题" class="headerlink" title="选择一个主题"></a>选择一个主题</h3><p>执行完上面几条命令之后，在浏览器打开地址：<code>http://localhost:4000/</code>就会看到hexo为你提供的默认主题。如果你不喜欢hexo自带的主题，可以去 <a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">hexo官网</a> 找个喜欢的主题。下载主题源码到<code>.../你的博客/themes/</code>里面，根据主题的README文档提示，可能需要安装一些依赖包，或者对主题的<code>_config.myl</code>文件进行修改。</p><p>如果你想使用本站的博客主题的话，只需要打开终端，cd到你博客所在的目录，执行以下这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo.sh i x</span><br></pre></td></tr></table></figure><p>如果提示 <code>command not found</code> ，说明你的电脑上还没有使用过 hexo.sh 脚本，那么可以执行下面这一段命令下载脚本然后应用主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -O <span class="string">'https://raw.githubusercontent.com/xaoxuu/hexo.sh/master/hexo.sh'</span> -<span class="comment"># &amp;&amp; chmod 777 hexo.sh &amp;&amp; . hexo.sh -i i x</span></span><br></pre></td></tr></table></figure><h3 id="写下第一篇博文"><a href="#写下第一篇博文" class="headerlink" title="写下第一篇博文"></a>写下第一篇博文</h3><p>你可以按照 <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a> 的方法去创建一个具有初始化内容的md文件到<code>.../你的博客/source/_posts/</code>位置，当然也可以通过其他任意方式创建md文件，只要文件开头有如下格式的内容即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">layout:</span>     <span class="string">post</span></span><br><span class="line"><span class="attr">date:</span>       <span class="number">2017</span><span class="bullet">-07</span><span class="bullet">-05</span></span><br><span class="line"><span class="attr">title:</span>      <span class="string">如何搭建基于Hexo的独立博客</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Cocoa</span> <span class="string">Dev</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">blog</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">Hexo</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"><span class="string">这是预览</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;!--more--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">这是正文</span></span><br></pre></td></tr></table></figure><h2 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h2><p>博客发布到服务器才能被外网访问，如果你有服务器更好，可以支持一些有趣的功能，例如 <a href="https://jaredforsyth.com/hexo-admin/" rel="external nofollow noopener noreferrer" target="_blank">hexo-admin</a> 可以为你的博客增加后台管理功能，在其他地方只要登录管理员账号就可以在线写博文了。但是如果没有自己的服务器的，也可以将博客托管到 <a href="https://github.com" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a> 、 <a href="http://coding.net" rel="external nofollow noopener noreferrer" target="_blank">Coding</a> 等网站。他们的优缺点如下：</p><p><strong>GitHub</strong><br>优点：功能最强大，最知名，偏技术性的博客力荐。<br>缺点：国内访问稍慢（以前是很慢，现在已经好多了，但是仍不及国内的服务快）；GitHub服务器屏蔽了百度爬虫，要想被百度收录，需要去百度站长平台手动提交。</p><p><strong>Coding</strong><br>优点：国内访问速度很快，一键申请并配置好SSL证书，很容易被百度收录。<br>缺点：只能通过CNAME方式设置域名，也就意味着你不能同时使用域名邮箱等其他域名服务。</p><p>常用的命令有：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hexo clean</span></span><br><span class="line"><span class="attribute">hexo g</span></span><br><span class="line"><span class="attribute">hexo d</span></span><br></pre></td></tr></table></figure><p>暂时先更到这里，有什么疑问随时可以问我，或者在下方DISQUS留言。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 接入 Strava 分享模块（下篇：StravaSDK）</title>
      <link href="/blog/2017-06-28-ios-strava/"/>
      <url>/blog/2017-06-28-ios-strava/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/posts/2017/4e587f8d048a87d48305e2f26d6aca74048fcf.jpg" alt=""></p><p><a href="https://github.com/StravaKit/StravaKit" rel="external nofollow noopener noreferrer" target="_blank">StravaKit</a> 是一个比较新而且代码比较规范的第三方SDK，但是目前还没有上传功能（详见 <a href="https://github.com/StravaKit/StravaKit/blob/master/TODO.md" rel="external nofollow noopener noreferrer" target="_blank">todo</a>） 。所以我不得已对<code>StravaKit 0.9.5</code>增加上传功能，并进行一些简单封装和改编，使之能够植入到公司项目中。由于时间有限，我只增加了上传fit文件的功能，并且使用了第三方框架<code>Alamofire</code>，所以需要在项目中导入<code>Alamofire</code>。</p><a id="more"></a><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>StravaSDK下载：<a href="https://github.com/xaoxuu/StravaSDK" rel="external nofollow noopener noreferrer" target="_blank">StravaSDK.zip</a></p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><p>需要三个参数：<code>ClientId</code>、<code>ClientSecret</code>和app的<code>URLSchemes</code>。其中前两个是在 <a href="http://labs.strava.com/developers/" rel="external nofollow noopener noreferrer" target="_blank">Strava平台</a> 注册一个app的时候会给出。<br>示例代码：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StravaSDK</span>.config(clientId: <span class="string">"18583"</span>, clientSecret: <span class="string">"a05fde98a830effde2e0f84cc39d76b040d4d67e"</span>, appSchemes: <span class="string">"hitfit"</span>)</span><br></pre></td></tr></table></figure><h2 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h2><p>获取授权<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StravaSDK</span>.authorize()</span><br></pre></td></tr></table></figure><p></p><p>取消授权<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StravaSDK</span>.deauthorize()</span><br></pre></td></tr></table></figure><p></p><p>查询是否已授权<br></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StravaSDK</span>.isAuthorized</span><br></pre></td></tr></table></figure><p></p><h2 id="上传活动数据（-fit）"><a href="#上传活动数据（-fit）" class="headerlink" title="上传活动数据（.fit）"></a>上传活动数据（.fit）</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StravaSDK</span>.uploadActivity(path: <span class="string">".../test.fit"</span>, type: <span class="string">"run"</span>, name: <span class="string">"Afternoon Run"</span>) &#123; (response, error) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>相关资料： <a href="https://strava.github.io/api/" rel="external nofollow noopener noreferrer" target="_blank">Strava官方文档</a> ， <a href="https://github.com/StravaKit/StravaKit/tree/v0.9.5" rel="external nofollow noopener noreferrer" target="_blank">StravaKit源码</a> ， <a href="https://github.com/xaoxuu/StravaSDK/" rel="external nofollow noopener noreferrer" target="_blank">StravaSDK源码</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Strava </tag>
            
            <tag> fit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift 使用 Alamofire 框架上传文件</title>
      <link href="/blog/2017-06-26-swift-alamofire/"/>
      <url>/blog/2017-06-26-swift-alamofire/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://cdn.jsdelivr.net/gh/xaoxuu/assets@18.12.27/posts/2017/48c3b80ea9261d1946ca09417c34acf05a5b06.png" alt=""></p><p><a href="https://github.com/Alamofire/Alamofire" rel="external nofollow noopener noreferrer" target="_blank">Alamofire</a> 是一个在GitHub上star数已超过24k的网络库。</p><a id="more"></a><p>先贴出一段代码，这是我在StravaKit中增加的上传fit文件功能：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Requestor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">uploadFitFile</span><span class="params">(url: String, params: [String : String]?, file: URL, completionHandler: <span class="params">(<span class="params">(<span class="number">_</span> response: Any?, <span class="number">_</span> error: NSError?)</span></span></span></span> -&gt; ())?) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> accessToken = <span class="type">Strava</span>.sharedInstance.accessToken</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> error = <span class="type">Strava</span>.error(.noAccessToken, reason: <span class="string">"No Access Token"</span>)</span><br><span class="line">                completionHandler?(<span class="literal">nil</span>, error)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">debugPrint</span>(accessToken)</span><br><span class="line">        <span class="keyword">let</span> au = <span class="string">"Bearer <span class="subst">\(accessToken)</span>"</span></span><br><span class="line">        <span class="keyword">let</span> headers = [<span class="string">"Authorization"</span>: au]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Alamofire</span>.upload(multipartFormData: &#123; (multipartFormData) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> params = params &#123;</span><br><span class="line">                <span class="keyword">for</span> (key, value) <span class="keyword">in</span> params &#123;</span><br><span class="line">                    multipartFormData.append(value.data(using: .utf8)!, withName: key)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            multipartFormData.append(file, withName: <span class="string">"file"</span>, fileName: file.lastPathComponent, mimeType: <span class="string">"multipart/form-data"</span>)</span><br><span class="line">        &#125;, usingThreshold: <span class="type">SessionManager</span>.multipartFormDataEncodingMemoryThreshold, to: baseUrl + url, method: .post, headers: headers) &#123; (encodingResult) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">switch</span> encodingResult &#123;</span><br><span class="line">            <span class="keyword">case</span> .success(<span class="keyword">let</span> upload, <span class="number">_</span>, <span class="number">_</span>):</span><br><span class="line">                upload.responseJSON(completionHandler: &#123; (response) <span class="keyword">in</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">let</span> value = response.result.value &#123;</span><br><span class="line">                        <span class="keyword">let</span> dict = value <span class="keyword">as</span>! <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;;</span><br><span class="line">                        <span class="keyword">var</span> error = response.result.error <span class="keyword">as</span> <span class="type">NSError</span>?</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> err = dict[<span class="string">"error"</span>] &#123;</span><br><span class="line">                            <span class="keyword">if</span> (err <span class="keyword">as</span> <span class="type">AnyObject</span>).isKind(of: <span class="type">NSNull</span>.<span class="keyword">self</span>) &#123;</span><br><span class="line">                                <span class="comment">// 成功</span></span><br><span class="line">                                <span class="built_in">debugPrint</span>(<span class="string">"成功"</span>)</span><br><span class="line"></span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 失败</span></span><br><span class="line">                                <span class="built_in">debugPrint</span>(<span class="string">"失败"</span>,err)</span><br><span class="line">                                error = <span class="type">NSError</span>.<span class="keyword">init</span>(domain: <span class="string">"strava"</span>, code: <span class="number">0</span>, userInfo: [<span class="type">NSLocalizedDescriptionKey</span>:err])</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> completionHandler = completionHandler &#123;</span><br><span class="line">                            completionHandler(response.result,error)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> <span class="keyword">let</span> completionHandler = completionHandler &#123;</span><br><span class="line">                            <span class="keyword">if</span> <span class="keyword">let</span> error = response.result.error &#123;</span><br><span class="line">                                completionHandler(response.result,error <span class="keyword">as</span> <span class="type">NSError</span>)</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;)</span><br><span class="line">            <span class="keyword">case</span> .failure(<span class="keyword">let</span> error):</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Alamofire </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 接入 Strava 分享模块（上篇：FitSDK）</title>
      <link href="/blog/2017-06-22-ios-fitsdk/"/>
      <url>/blog/2017-06-22-ios-fitsdk/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.thisisant.com/resources/fit/" rel="external nofollow noopener noreferrer" target="_blank">fit</a> 是一种文件协议，体积小巧，多用于可穿戴设备记录、传输运动与健康数据。官方提供了C、C++、Java语言的SDK和非常详细的使用文档。因此在iOS端接入fit就需要在C或C++的SDK基础上进行一点面向对象的封装。</p><a id="more"></a><h2 id="SDK下载"><a href="#SDK下载" class="headerlink" title="SDK下载"></a>SDK下载</h2><ul><li><a href="https://www.thisisant.com/resources/fit/" rel="external nofollow noopener noreferrer" target="_blank">官方SDK.zip</a></li><li><a href="https://github.com/xaoxuu/FitSDK" rel="external nofollow noopener noreferrer" target="_blank">FitSDK for iOS</a> （我基于官方C语言版SDK的OC封装）</li></ul><h2 id="认识Fit"><a href="#认识Fit" class="headerlink" title="认识Fit"></a>认识Fit</h2><p>我使用的C语言的SDK，官方有示例demo，在<code>fit_mgr</code>文件中提供了一些示例，这些代码未必全部都要用到。创建一个最简单的<code>.fit</code>文件的流程是：</p><h3 id="写fileid"><a href="#写fileid" class="headerlink" title="写fileid"></a>写fileid</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fit_transaction_file</span><span class="params">(FIT_FILE type, FIT_MANUFACTURER manufacturer, FIT_UINT16 product, FIT_UINT32Z serial_number)</span></span>&#123;</span><br><span class="line">    <span class="comment">// Write file id message.</span></span><br><span class="line">    FIT_UINT8 local_mesg_number = <span class="number">0</span>;</span><br><span class="line">    FIT_FILE_ID_MESG file_id;</span><br><span class="line">    Fit_InitMesg(fit_mesg_defs[FIT_MESG_FILE_ID], &amp;file_id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// @xaoxuu: type FIT_FILE_ACTIVITY = 4 活动数据</span></span><br><span class="line">    file_id.type = type;</span><br><span class="line">    <span class="comment">// @xaoxuu: 厂商</span></span><br><span class="line">    file_id.manufacturer = manufacturer;</span><br><span class="line">    <span class="comment">// @xaoxuu: 产品</span></span><br><span class="line">    <span class="comment">//        file_id.product_name</span></span><br><span class="line">    file_id.product = product;</span><br><span class="line">    <span class="comment">// @xaoxuu: 序列号</span></span><br><span class="line">    file_id.serial_number = serial_number;</span><br><span class="line">    <span class="comment">// @xaoxuu: 生产日期</span></span><br><span class="line">    <span class="comment">//        time_t now;</span></span><br><span class="line">    <span class="comment">//        time(&amp;now);</span></span><br><span class="line">    <span class="comment">//        file_id.time_created = now;</span></span><br><span class="line"></span><br><span class="line">    WriteMessageDefinition(local_mesg_number, fit_mesg_defs[FIT_MESG_FILE_ID], FIT_FILE_ID_MESG_DEF_SIZE, static_fp);</span><br><span class="line">    WriteMessage(local_mesg_number, &amp;file_id, FIT_FILE_ID_MESG_SIZE, static_fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fit_transaction_field_desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Write a Field Description</span></span><br><span class="line">    FIT_UINT8 local_mesg_number = <span class="number">1</span>;</span><br><span class="line">    FIT_FIELD_DESCRIPTION_MESG field_description_mesg;</span><br><span class="line"></span><br><span class="line">    Fit_InitMesg(fit_mesg_defs[FIT_MESG_FIELD_DESCRIPTION], &amp;field_description_mesg);</span><br><span class="line">    field_description_mesg.developer_data_index = <span class="number">0</span>;</span><br><span class="line">    field_description_mesg.field_definition_number = <span class="number">0</span>;</span><br><span class="line">    field_description_mesg.fit_base_type_id = FIT_BASE_TYPE_UINT16;</span><br><span class="line">    WriteMessageDefinition(local_mesg_number, fit_mesg_defs[FIT_MESG_FIELD_DESCRIPTION], FIT_FIELD_DESCRIPTION_MESG_DEF_SIZE, static_fp);</span><br><span class="line">    WriteMessage(local_mesg_number, &amp;field_description_mesg, FIT_FIELD_DESCRIPTION_MESG_SIZE, static_fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写record"><a href="#写record" class="headerlink" title="写record"></a>写record</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入Record Defenition</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fit_transaction_record_def</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FIT_UINT8 local_mesg_number = <span class="number">2</span>;</span><br><span class="line">    WriteMessageDefinition(local_mesg_number, fit_mesg_defs[FIT_MESG_RECORD], FIT_RECORD_MESG_DEF_SIZE, static_fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环写入record数据</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fit_transaction_record_msg</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> timestamp, <span class="keyword">int</span> position_lat, <span class="keyword">int</span> position_long, <span class="keyword">unsigned</span> <span class="keyword">int</span> distance, <span class="keyword">unsigned</span> <span class="keyword">short</span> altitude, <span class="keyword">unsigned</span> <span class="keyword">short</span> speed, <span class="keyword">unsigned</span> <span class="keyword">char</span> heart_rate)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Record message</span></span><br><span class="line">    FIT_UINT8 local_mesg_number = <span class="number">2</span>;</span><br><span class="line">    FIT_RECORD_MESG record;</span><br><span class="line"></span><br><span class="line">    Fit_InitMesg(fit_mesg_defs[FIT_MESG_RECORD], &amp;record);</span><br><span class="line">    record.timestamp = timestamp;</span><br><span class="line">    record.position_lat = position_lat;</span><br><span class="line">    record.position_long = position_long;</span><br><span class="line">    record.distance = distance;</span><br><span class="line">    record.altitude = altitude;</span><br><span class="line">    record.speed = speed;</span><br><span class="line">    record.heart_rate = heart_rate;</span><br><span class="line">    WriteMessage(local_mesg_number,&amp;record,FIT_RECORD_MESG_SIZE,static_fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="开始封装"><a href="#开始封装" class="headerlink" title="开始封装"></a>开始封装</h2><h3 id="设计模型"><a href="#设计模型" class="headerlink" title="设计模型"></a>设计模型</h3><p>FitActivity.h</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  FitAcitvity.h</span></span><br><span class="line"><span class="comment">//  FitSDK</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by xaoxuu on 04/07/2017.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017 xaoxuu. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@class</span> <span class="title">FitActivityRecord</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, FitActivityType) &#123;</span><br><span class="line">    FitActivityTypeWalk = <span class="number">11</span>, <span class="comment">// 枚举值等于FIT_SPORT值</span></span><br><span class="line">    FitActivityTypeRun = <span class="number">1</span>,</span><br><span class="line">    FitActivityTypeRide = <span class="number">2</span>,</span><br><span class="line">    FitActivityTypeSwim = <span class="number">5</span>,</span><br><span class="line">    FitActivityTypeHike = <span class="number">17</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FitActivity</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: fit 文件路径</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *path;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: 活动名</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: 活动类型</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) FitActivityType type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: 活动类型</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">readonly</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSString</span> *typeString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: records</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span>&lt;FitActivityRecord *&gt; *records;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一条record</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param record record</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)addRecord:(<span class="keyword">void</span> (^)(FitActivityRecord *aRecord))record;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FitActivityRecord</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: timestamp</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">unsigned</span> <span class="keyword">int</span> timestamp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: position_lat</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">int</span> position_lat;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: position_long</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">int</span> position_long;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: distance</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">unsigned</span> <span class="keyword">int</span> distance;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: altitude</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">unsigned</span> <span class="keyword">short</span> altitude;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: speed</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">unsigned</span> <span class="keyword">short</span> speed;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @xaoxuu: heart_rate</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">assign</span>, <span class="keyword">nonatomic</span>) <span class="keyword">unsigned</span> <span class="keyword">char</span> heart_rate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>FitActivity.m</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  FitAcitvity.m</span></span><br><span class="line"><span class="comment">//  FitSDK</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by xaoxuu on 04/07/2017.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017 xaoxuu. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"FitAcitvity.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FitActivity</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _records = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">        <span class="keyword">self</span>.type = FitActivityTypeWalk;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setType:(FitActivityType)type&#123;</span><br><span class="line">    _type = type;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> FitActivityTypeWalk:</span><br><span class="line">            _typeString = <span class="string">@"walk"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FitActivityTypeRun:</span><br><span class="line">            _typeString = <span class="string">@"run"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FitActivityTypeRide:</span><br><span class="line">            _typeString = <span class="string">@"ride"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FitActivityTypeSwim:</span><br><span class="line">            _typeString = <span class="string">@"swim"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> FitActivityTypeHike:</span><br><span class="line">            _typeString = <span class="string">@"hike"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name&#123;</span><br><span class="line">    _name = name;</span><br><span class="line">    _path = [<span class="keyword">self</span> pathWithName:name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addRecord:(<span class="keyword">void</span> (^)(FitActivityRecord *aRecord))record&#123;</span><br><span class="line">    <span class="keyword">if</span> (record) &#123;</span><br><span class="line">        FitActivityRecord *rec = [FitActivityRecord new];</span><br><span class="line">        record(rec);</span><br><span class="line">        [<span class="keyword">self</span>.records addObject:rec];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)pathWithName:(<span class="built_in">NSString</span> *)name&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *path = [[<span class="built_in">NSTemporaryDirectory</span>() stringByAppendingPathComponent:<span class="string">@"com.xaoxuu.fitsdk"</span>] stringByAppendingPathComponent:name];</span><br><span class="line">    path = [path stringByAppendingPathExtension:<span class="string">@"fit"</span>];</span><br><span class="line">    <span class="comment">// create dir if not exist</span></span><br><span class="line">    <span class="built_in">NSFileManager</span> *fm = [<span class="built_in">NSFileManager</span> defaultManager];</span><br><span class="line">    <span class="built_in">NSString</span> *dir = path.stringByDeletingLastPathComponent;</span><br><span class="line">    <span class="built_in">BOOL</span> result = [fm createDirectoryAtPath:dir withIntermediateDirectories:<span class="literal">YES</span> attributes:<span class="literal">nil</span> error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"can not create the directory at path %@"</span>,dir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FitActivityRecord</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)init&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _timestamp = <span class="number">702940946</span>;</span><br><span class="line">        _position_lat = <span class="number">0</span>;</span><br><span class="line">        _position_long = <span class="number">0</span>;</span><br><span class="line">        _distance = <span class="number">0</span>;</span><br><span class="line">        _altitude = <span class="number">0</span>;</span><br><span class="line">        _speed = <span class="number">0</span>;</span><br><span class="line">        _heart_rate = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="封装接口"><a href="#封装接口" class="headerlink" title="封装接口"></a>封装接口</h3><p>FitSDK.h</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  FitSDK.h</span></span><br><span class="line"><span class="comment">//  FitSDK</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by xaoxuu on 04/07/2017.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017 xaoxuu. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"FitAcitvity.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">FitSDK</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 创建一个活动数据fit文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param activity 活动数据</span></span><br><span class="line"><span class="comment"> @return 活动数据模型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (FitActivity *)createActivity:(<span class="keyword">void</span> (^)(FitActivity *activity))activity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>FitSDK.m</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  FitSDK.m</span></span><br><span class="line"><span class="comment">//  FitSDK</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by xaoxuu on 04/07/2017.</span></span><br><span class="line"><span class="comment">//  Copyright © 2017 xaoxuu. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#import <span class="meta-string">"FitSDK.h"</span></span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"fit_mgr.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FitSDK</span></span></span><br><span class="line"></span><br><span class="line">+ (FitActivity *)createActivity:(<span class="keyword">void</span> (^)(FitActivity *activity))activity&#123;</span><br><span class="line">    FitActivity *act = [FitActivity new];</span><br><span class="line">    <span class="keyword">if</span> (activity) &#123;</span><br><span class="line">        activity(act);</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span> createActivityWithModel:act];</span><br><span class="line">    <span class="keyword">return</span> act;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)createActivityWithModel:(FitActivity *)activity&#123;</span><br><span class="line">    <span class="comment">// @xaoxuu: fit file</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fp = [activity.path cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    fit_transaction(fp, activity.type, ^&#123;</span><br><span class="line">        [activity.records enumerateObjectsUsingBlock:^(FitActivityRecord * _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            fit_transaction_record_msg(obj.timestamp, obj.position_lat, obj.position_long, obj.distance, obj.altitude, obj.speed, obj.heart_rate);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">FitActivity *activity = [FitSDK createActivity:^(FitActivity *activity) &#123;</span><br><span class="line">    activity.name = <span class="string">@"test"</span>;</span><br><span class="line">    activity.type = FitActivityTypeRun;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>; i++) &#123;</span><br><span class="line">        [activity addRecord:^(FitActivityRecord *aRecord) &#123;</span><br><span class="line">            aRecord.timestamp = [[<span class="built_in">NSDate</span> date] timeIntervalSince1970] - <span class="number">631065600</span>;</span><br><span class="line">            aRecord.position_lat = <span class="number">495280430</span>+i*<span class="number">1000</span>;</span><br><span class="line">            aRecord.position_long = <span class="number">-872696681</span>-i*<span class="number">1500</span>;</span><br><span class="line">            aRecord.distance = <span class="number">2</span>+i/<span class="number">100</span>;</span><br><span class="line">            aRecord.altitude = <span class="number">287.2</span>+i;</span><br><span class="line">            aRecord.speed = <span class="number">0.29</span>+i/<span class="number">50</span>;</span><br><span class="line">            aRecord.heart_rate = <span class="number">68</span>+i/<span class="number">4</span>;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// activity.path就是生成的fit文件路径</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, activity.path);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Strava </tag>
            
            <tag> fit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 让代码实现“冷却”机制</title>
      <link href="/blog/2017-05-07-code-cooldown/"/>
      <url>/blog/2017-05-07-code-cooldown/</url>
      
        <content type="html"><![CDATA[<p>首先我个人认为设计合理、逻辑严谨的代码是不需要强行冷却的，但是我们不能保证我们面对的代码永远都是完美的，所以我在 <a href="https://github.com/xaoxuu/AXKit" rel="external nofollow noopener noreferrer" target="_blank">AXKit</a> 中就提供了这个冷却机制以延长那些癌症晚期的代码的寿命。</p><a id="more"></a><ul><li><strong>优点：</strong>执行代码像放技能一样，可以强行打破死循环、避免死循环、避免过高频率访问某一资源。</li><li><strong>缺点：</strong>治标不治本，最好的解决办法是找出会产生问题的代码进行重构，从根源上解决问题。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="场景1"><a href="#场景1" class="headerlink" title="场景1"></a>场景1</h3><p>某种耗时耗能的操作，希望在某种条件下触发，但又担心用户频繁触发，例如进入某个页面的时候同步一下设备电量、或者同步一下运动数据；进入某个页面预加载一下子页面的网络数据……就可以这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @xaoxuu: 重新获取数据源并刷新tableView</span></span><br><span class="line">- (<span class="keyword">void</span>)reloadDataAndRefreshTableView&#123;</span><br><span class="line">    <span class="comment">// 无论如何，2秒内最多只会执行一次此方法。</span></span><br><span class="line">    ax_dispatch_cooldown(<span class="number">0</span>, <span class="number">2</span>, @<span class="string">"reload data and refresh table view"</span>, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [self.dataList removeAllObjects];</span><br><span class="line">        [self reloadTableView];</span><br><span class="line">    &#125;, ^&#123;</span><br><span class="line">        AXLogFailure(@<span class="string">"操作过于频繁"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">- (IBAction)btn1:(UIButton *)sender &#123;</span><br><span class="line">    <span class="comment">// @xaoxuu: 立即在主线程施放大招，冷却时间是60秒。</span></span><br><span class="line">    ax_dispatch_cooldown(<span class="number">0</span>, <span class="number">60</span>, self, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        AXLogSuccess(@<span class="string">"技能施放成功！"</span>);</span><br><span class="line">    &#125;, ^&#123;</span><br><span class="line">        AXLogFailure(@<span class="string">"抱歉，技能在冷却中"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (IBAction)btn2:(UIButton *)sender &#123;</span><br><span class="line">    <span class="comment">// @xaoxuu: 延迟2秒后在后台默默施放大招，冷却时间是120秒。</span></span><br><span class="line">    ax_dispatch_cooldown(<span class="number">2</span>, <span class="number">120</span>, self, dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">        AXLogSuccess(@<span class="string">"技能施放成功！"</span>);</span><br><span class="line">    &#125;, ^&#123;</span><br><span class="line">        AXLogFailure(@<span class="string">"抱歉，技能在冷却中"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @xaoxuu: 两者的token相同则共享冷却时间。</span></span><br></pre></td></tr></table></figure><h3 id="场景2"><a href="#场景2" class="headerlink" title="场景2"></a>场景2</h3><p>如何强行打破死循环？说实话我是没有遇到这种需求，仅仅是这个机制有这种能力，觉得挺有趣，就尝试一下：<br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @xaoxuu: 自己调用自己，无限循环</span></span><br><span class="line">- (<span class="keyword">void</span>)loop&#123;</span><br><span class="line">    AXLogFunc();</span><br><span class="line">    [self loop];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @xaoxuu: 自己调用自己，但是发现代码在冷却，所以就失效了，一个环节被中断，死循环就被打破了</span></span><br><span class="line">- (<span class="keyword">void</span>)loop&#123;</span><br><span class="line">    AXLogFunc();</span><br><span class="line">    ax_dispatch_cooldown(<span class="number">0</span>, <span class="number">0.0001</span>, @<span class="string">"loop"</span>, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        [self loop];</span><br><span class="line">    &#125;, nil);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>简单地说，就是给每一个代码块分配一个<code>dispatch_after</code>的函数，执行的时候开始计时，并且函数标记为<code>disable</code>，计时结束后重新<code>enable</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 拥有冷却机制的dispatch</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param delay 延迟时间</span></span><br><span class="line"><span class="comment"> @param cooldown 冷却时间</span></span><br><span class="line"><span class="comment"> @param token 冷却计时的token，如果相同，则共享冷却时间</span></span><br><span class="line"><span class="comment"> @param queue 指定线程</span></span><br><span class="line"><span class="comment"> @param block 要执行的block</span></span><br><span class="line"><span class="comment"> @param block_cooling 如果在冷却中要执行的block</span></span><br><span class="line"><span class="comment"> @return 操作口令（用于取消此操作）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">inline ax_dispatch_operation_t ax_dispatch_cooldown(NSTimeInterval delay, NSTimeInterval cooldown,id token, dispatch_queue_t queue, void (^block)(void), void (^ __nullable block_cooling)(void))&#123;</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        token = @<span class="string">"default token"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">queue</span>) &#123;</span><br><span class="line">        <span class="built_in">queue</span> = dispatch_get_main_queue();</span><br><span class="line">    &#125;</span><br><span class="line">    BOOL cooling = is_cooling(token);</span><br><span class="line">    <span class="keyword">if</span> (cooling) &#123;</span><br><span class="line">        <span class="keyword">if</span> (block_cooling) &#123;</span><br><span class="line">            block_cooling();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        set_is_cooling(YES, token);</span><br><span class="line">        dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (<span class="keyword">int64_t</span>)(cooldown * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">            set_is_cooling(NO, token);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> ax_dispatch_cancellable(delay, <span class="built_in">queue</span>, block);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nil;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对于代码是否正在冷却的判断利于了runtime机制，相当于新增了一个属性，用来保存是否正在冷却的状态：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">void</span> *AXBlockWrapperKey = &amp;AXBlockWrapperKey;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> BOOL <span class="title">is_cooling</span><span class="params">(id token)</span></span>&#123;</span><br><span class="line">    NSNumber *cooling = objc_getAssociatedObject(token, AXBlockWrapperKey);</span><br><span class="line">    <span class="keyword">return</span> cooling.boolValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">set_is_cooling</span><span class="params">(BOOL cooling, id token)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">        token = @<span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    objc_setAssociatedObject(token, AXBlockWrapperKey, @(cooling), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> cooldown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Runtime 简单应用：AXKit手势分类实现原理</title>
      <link href="/blog/2017-04-07-gesture/"/>
      <url>/blog/2017-04-07-gesture/</url>
      
        <content type="html"><![CDATA[<p>手势的应用场景很多，如果你觉得系统给我们提供的方法使用起来并不那么方便，那么本文可能对你有帮助，因为我用block对其进行了封装。</p><a id="more"></a><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul><li>场景1：为了调试某个功能，快速给一个视图添加手势，要求轻触的时候执行某段代码。</li><li>场景2：tabbar按钮双击刷新列表，要求双击的速度在一秒内，执行某段代码。</li><li>场景3：给某个图片添加捏合手势以及旋转手势。</li><li>……</li></ul><p>使用AXKit，可以轻易实现上述几种场景中的需求：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[<span class="keyword">self</span>.view ax_addTapGestureHandler:^(<span class="built_in">UITapGestureRecognizer</span> * _Nonnull sender) &#123;</span><br><span class="line">    <span class="comment">// 轻触的时候要执行的代码</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line">[<span class="keyword">self</span>.view ax_addDoubleTapGesture:<span class="literal">nil</span> duration:<span class="number">1</span> handler:^(<span class="built_in">UITapGestureRecognizer</span> * _Nonnull sender) &#123;</span><br><span class="line">    <span class="comment">// 双击的时候要执行的代码</span></span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 捏合手势</span></span><br><span class="line">[<span class="keyword">self</span>.view ax_addPinchGesture:^(<span class="built_in">UIPinchGestureRecognizer</span> * _Nonnull sender) &#123;</span><br><span class="line">    <span class="comment">// 对手势对象（sender）的配置</span></span><br><span class="line">    sender.view.transform = <span class="built_in">CGAffineTransformScale</span>(sender.view.transform, sender.scale, sender.scale);</span><br><span class="line">    sender.scale = <span class="number">1</span>;</span><br><span class="line">&#125; handler:^(<span class="built_in">UIPinchGestureRecognizer</span> * _Nonnull sender) &#123;</span><br><span class="line">    <span class="comment">// 捏合的时候要执行的代码</span></span><br><span class="line">&#125;];</span><br><span class="line"><span class="comment">// 旋转手势</span></span><br><span class="line">[<span class="keyword">self</span>.view ax_addRotationGesture:^(<span class="built_in">UIRotationGestureRecognizer</span> * _Nonnull sender) &#123;</span><br><span class="line">    <span class="comment">// 对手势对象（sender）的配置</span></span><br><span class="line">    sender.view.transform = <span class="built_in">CGAffineTransformRotate</span>(sender.view.transform, sender.rotation);</span><br><span class="line">    sender.rotation = <span class="number">0</span>;</span><br><span class="line">&#125; handler:^(<span class="built_in">UIRotationGestureRecognizer</span> * _Nonnull sender) &#123;</span><br><span class="line">    <span class="comment">// 旋转的时候要执行的代码</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>推荐CocoaPods方式，在podfile中添加一行：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'AXKit'</span></span><br></pre></td></tr></table></figure><p>然后在终端中执行<code>pod install</code>即可完成安装。</p><p>AXKit的全局头文件是：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过CocoaPods或静态库方式安装</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AXKit/AXKit.h&gt;</span></span></span><br><span class="line"><span class="comment">// 通过手动方式</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"AXKit.h"</span></span></span><br></pre></td></tr></table></figure><h2 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h2><p>直接上头文件源码，注释很详细：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIView</span> (<span class="title">AXGestureExtension</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 处理tap手势</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param handler 处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addTapGestureHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个tap手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param tap     tap</span></span><br><span class="line"><span class="comment"> @param handler 处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addTapGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))tap handler:(<span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个tap手势，并处理，附加动画效果</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param tap      tap</span></span><br><span class="line"><span class="comment"> @param handler  处理手势的block</span></span><br><span class="line"><span class="comment"> @param scale    动画比例</span></span><br><span class="line"><span class="comment"> @param duration 持续时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addTapGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))tap handler:(<span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))handler animatedScale:(<span class="built_in">CGFloat</span>)scale duration:(<span class="built_in">NSTimeInterval</span>)duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个双击手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param doubleTap double tap</span></span><br><span class="line"><span class="comment"> @param duration  双击间隔时间</span></span><br><span class="line"><span class="comment"> @param handler   处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addDoubleTapGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))doubleTap duration:(<span class="built_in">NSTimeInterval</span>)duration handler:(<span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个长按手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param longPress 长按手势</span></span><br><span class="line"><span class="comment"> @param handler   处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addLongPressGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UILongPressGestureRecognizer</span> *sender))longPress handler:(<span class="keyword">void</span> (^)(<span class="built_in">UILongPressGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个轻扫手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param swipe   轻扫</span></span><br><span class="line"><span class="comment"> @param handler 处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addSwipeGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UISwipeGestureRecognizer</span> *sender))swipe handler:(<span class="keyword">void</span> (^)(<span class="built_in">UISwipeGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个滑动手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param pan     滑动</span></span><br><span class="line"><span class="comment"> @param handler 处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addPanGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UIPanGestureRecognizer</span> *sender))pan handler:(<span class="keyword">void</span> (^)(<span class="built_in">UIPanGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个屏幕边缘滑动手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param screenEdgePan  屏幕边缘滑动</span></span><br><span class="line"><span class="comment"> @param handler        处理手势的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addScreenEdgePanGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UIScreenEdgePanGestureRecognizer</span> *sender))screenEdgePan handler:(<span class="keyword">void</span> (^)(<span class="built_in">UIScreenEdgePanGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个双指缩放手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param pinch   双指缩放手势</span></span><br><span class="line"><span class="comment"> @param handler 处理手势的block</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> sender.view.transform = CGAffineTransformScale(sender.view.transform, sender.scale, sender.scale);</span></span><br><span class="line"><span class="comment"> sender.scale = 1;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addPinchGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UIPinchGestureRecognizer</span> *sender))pinch handler:(<span class="keyword">void</span> (^)(<span class="built_in">UIPinchGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 添加一个双指旋转手势，并处理</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param rotation 双指旋转手势</span></span><br><span class="line"><span class="comment"> @param handler  处理手势的block</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> sender.view.transform = CGAffineTransformRotate(sender.view.transform, sender.rotation);</span></span><br><span class="line"><span class="comment"> sender.rotation = 0;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_addRotationGesture:(<span class="keyword">nullable</span> <span class="keyword">void</span> (^)(<span class="built_in">UIRotationGestureRecognizer</span> *sender))rotation handler:(<span class="keyword">void</span> (^)(<span class="built_in">UIRotationGestureRecognizer</span> *sender))handler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>以最简单的tap手势为例，其实现如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)ax_addTapGestureHandler:(<span class="keyword">void</span> (^)(<span class="built_in">UITapGestureRecognizer</span> *sender))handler&#123;</span><br><span class="line">    <span class="comment">// 创建手势实例</span></span><br><span class="line">    <span class="built_in">UITapGestureRecognizer</span> *gesture = [<span class="built_in">UITapGestureRecognizer</span> new];</span><br><span class="line">    <span class="comment">// 将手势和target绑定</span></span><br><span class="line">    AXBindGestureAndTarget(gesture, AXDefaultTarget);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>AXBindGestureAndTarget(gesture, AXDefaultTarget)</code>用了inline函数：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> AXBindGestureAndTarget(<span class="built_in">UIGestureRecognizer</span> *gesture, AXEventTarget *target)&#123;</span><br><span class="line">    [gesture addTarget:target action:<span class="keyword">@selector</span>(handleEvent:)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AXDefaultTarget</code>则是宏定义，因为大部分地方用到的都是固定的三个参数：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define AXDefaultTarget AXTargetWith(self, gesture, handler)</span></span><br><span class="line"><span class="comment">// 依据self类、手势实例、handler代码块创建一个唯一的target</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> AXEventTarget *AXTargetWith(<span class="built_in">UIView</span> *obj, __kindof <span class="built_in">UIGestureRecognizer</span> *gesture, <span class="keyword">id</span> handler)&#123;</span><br><span class="line">    <span class="comment">// create a target with &lt;handler&gt;</span></span><br><span class="line">    AXEventTarget *target = [AXEventTarget targetWithHandler:handler];</span><br><span class="line">    <span class="comment">// add a &lt;gesture&gt; to target</span></span><br><span class="line">    [obj addGestureRecognizer:gesture];</span><br><span class="line">    <span class="comment">// save target (gesture + handler) to dictionary</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *gestures = objc_getAssociatedObject(obj, <span class="built_in">UIViewGestureAXBlockWrapperKey</span>);</span><br><span class="line">    <span class="keyword">if</span> (!gestures) &#123;</span><br><span class="line">        gestures = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        objc_setAssociatedObject(obj, <span class="built_in">UIViewGestureAXBlockWrapperKey</span>, gestures, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSMutableSet</span> *handlers = gestures[<span class="built_in">NSStringFromPointer</span>(gesture)];</span><br><span class="line">    <span class="keyword">if</span> (!handlers) &#123;</span><br><span class="line">        handlers = [<span class="built_in">NSMutableSet</span> set];</span><br><span class="line">        gestures[<span class="built_in">NSStringFromPointer</span>(gesture)] = handlers;</span><br><span class="line">    &#125;</span><br><span class="line">    [handlers addObject:target];</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用到了一个<code>AXEventTarget</code>类，这个类的功能就是保存<code>handler</code>，并在需要的时候执行<code>handler</code>。这个分类的实现参考了BlocksKit的实现原理，对其进行扩展，用到了runtime机制，至于什么是runtime，我们稍后再作讨论。本文稍后会进行更新，补充实现的思路、更详细的细节。</p><h2 id="附：关于runtime"><a href="#附：关于runtime" class="headerlink" title="附：关于runtime"></a>附：关于runtime</h2><p><strong>runtime是运行时一些机制，其中最主要的是消息机制</strong>。它与编译时语言的最大区别在于它在运行的时候才去确定要调用的函数类型，如果一个方法没有实现体，那么在编译阶段调用并不会报错，而编译时语言调用一个未实现的函数就会报错。运行时语言调用方法的本质是让对象发送<strong>消息</strong>，属于<strong>动态调用</strong>，编译时并不能真正决定调用哪个方法。下面是runtime的一些应用场景：</p><ul><li>动态添加方法</li><li>拦截系统自带的方法调用(Swizzle)、交换方法</li><li>json转模型（KVC）</li><li>给分类增加属性</li><li>实现NSCoding的归档解档</li><li>万能控制器跳转</li><li>JSpatch热更新（苹果不再允许使用热更新）</li><li>插件的开发（Xcode8已禁止插件）</li></ul>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> runtime </tag>
            
            <tag> 开源库 </tag>
            
            <tag> AXKit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 分层架构初探</title>
      <link href="/blog/2017-03-29-ios-layered-architecture/"/>
      <url>/blog/2017-03-29-ios-layered-architecture/</url>
      
        <content type="html"><![CDATA[<p>这篇博客把分层架构讲的很形象： <a href="https://blog.csdn.net/hanxuemin12345/article/details/8544957" rel="external nofollow noopener noreferrer" target="_blank">三层架构(我的理解及详细分析)</a> 。</p><h2 id="为什么要分层"><a href="#为什么要分层" class="headerlink" title="为什么要分层"></a>为什么要分层</h2><p>代码系统分层就好比管理分层一样，各司其职，优点非常多，对于软件后期的维护来说是十分有必要的。它的优点有：</p><ul><li><p>解耦</p><p>上一层依赖于下一层，如果测试下一层没有问题，那么问题就只有可能发现在本层了，便于发现和改正BUG。体现了“高内聚，低耦合”的思想。</p></li><li><p>分工明确</p><p>各个层次分工明确，将一个复杂问题简单拆分了。</p></li></ul><ul><li><p>便于维护</p><p>各层间通过接口解耦，接口与实现分离，从而可以非常简单的替换掉实现，或者实际实现等。</p></li></ul><ul><li><p>逻辑复用（代码复用）和劳动成本的减少</p><p>分层的根本在于代码的复用和劳动成本的减少。分层的最理想化的结果是实现层与层之间的互不依赖的内部实现，所谓的即插即用。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> architecture </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel 导出 iOS、Android 多国语言工具</title>
      <link href="/blog/2017-03-08-ios-localizable-string/"/>
      <url>/blog/2017-03-08-ios-localizable-string/</url>
      
        <content type="html"><![CDATA[<h2 id="1-下载，解压"><a href="#1-下载，解压" class="headerlink" title="1. 下载，解压"></a>1. 下载，解压</h2><p>下载工具：<a href="https://github.com/CatchZeng/Localizable.strings2Excel" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/CatchZeng/Localizable.strings2Excel</a> 。</p><a id="more"></a><p>解压开之后把里面的两个zip也解压开</p><h2 id="2-安装工具"><a href="#2-安装工具" class="headerlink" title="2. 安装工具"></a>2. 安装工具</h2><h3 id="pyexcelerator"><a href="#pyexcelerator" class="headerlink" title="pyexcelerator"></a>pyexcelerator</h3><p>打开命令行工具，cd到<code>.../Localizable.strings2Excel-master/pyexcelerator-0.6.4.1</code>文件夹，执行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p></p><h3 id="xld"><a href="#xld" class="headerlink" title="xld"></a>xld</h3><p>cd到<code>.../Localizable.strings2Excel-master/xlrd-1.0.0</code>文件夹，执行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p></p><h2 id="3-使用脚本"><a href="#3-使用脚本" class="headerlink" title="3. 使用脚本"></a>3. 使用脚本</h2><p>cd到<code>.../Localizable.strings2Excel-master/python</code>文件夹</p><p>如需将Excel表格转换成Localizable.strings或者strings.xml文件，执行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python LocalizableBack.py -f xxx/xxx.xls -t xxx/xxx</span><br></pre></td></tr></table></figure><p></p><p>如需将Localizable.strings或者strings.xml文件转换成Excel表格，执行：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Localizable.py -f xxx/ -t xxx/</span><br></pre></td></tr></table></figure><p></p><blockquote><p>工具的链接在：<a href="https://github.com/CatchZeng/Localizable.strings2Excel" rel="external nofollow noopener noreferrer" target="_blank">GitHub/CatchZeng</a> 感谢作者编写了如此方便的工具！<br>更多详细使用脚本请阅读<a href="https://github.com/CatchZeng/Localizable.strings2Excel" rel="external nofollow noopener noreferrer" target="_blank">官方README文件</a> 。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NEXUS 这个工具，以后不再更新了</title>
      <link href="/blog/2017-01-02-nexus/"/>
      <url>/blog/2017-01-02-nexus/</url>
      
        <content type="html"><![CDATA[<p>前几天一哥们发现了一个小BUG，立即打开尘封已久的 NEXUS 项目，发现距离上次更新已经时隔一年。以后我几乎不再使用 Windows 系统了，所以不出意外的话这就是最后一次更新了。</p><h2 id="那么，什么是-NEXUS-？"><a href="#那么，什么是-NEXUS-？" class="headerlink" title="那么，什么是 NEXUS ？"></a>那么，什么是 NEXUS ？</h2><p>简单地说，就如同电脑管家+快捷搜索+激活工具集锦+……<br>NEXUS（魔枢）意为联接、沟通，在《魔兽》里翻译为魔枢，《星际迷航》里翻译为时汇。软件以此为名旨在连通问题与答案，终极目标即输入任何问题或需求，即可一步达到目的，成为一个信息的枢纽。<br>魔枢的方便之处在于：点击屏幕左上角，即可呼出搜索栏，此搜索栏对于一些常用的网站如[优酷]、[淘宝]等等可以直达官网，省去了搜索引擎检索的步骤。左上角热键是透明的，不影响视觉，只有在允许魔枢后台运行时才会生效。</p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/86/218934d015453ee1e7fe3b19f92a3238c8552f.png" width="100%"></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/76/8aa3ad8994cb5991608f647f083592c9d9b230.png" width="50%"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/47/aed4572cf2d4d6ace5e7be2523be7cc9bcfc65.png" width="50%"></p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/c6/2a00a6361c048b4cec201d84cac9d5cd6c5164.png" width="50%"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://img.vim-cn.com/71/10005d574ccfe87bd0b31ad7d9820ec5d505f2.png" width="50%"></p><h2 id="适用平台"><a href="#适用平台" class="headerlink" title="适用平台"></a>适用平台</h2><p>Windows 7~10</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><ul><li>下载安装包： <a href="https://github.com/xaoxuu/NEXUS/releases/download/v6.3/NEXUS-setup.exe" rel="external nofollow noopener noreferrer" target="_blank">NEXUS-setup.exe</a></li><li>下载扩展包： <a href="https://github.com/TitanStudio/NEXUS/releases/download/v6.2/Extension20160207.exe" rel="external nofollow noopener noreferrer" target="_blank">Extension20160207.exe</a></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>大学的时候不知道GitHub，所以这是最近才上传的： <a href="https://github.com/xaoxuu/NEXUS" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xaoxuu/NEXUS</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>封装 .framework 静态库</title>
      <link href="/blog/2016-11-06-ios-framework/"/>
      <url>/blog/2016-11-06-ios-framework/</url>
      
        <content type="html"><![CDATA[<p>像工作中使用的第三方SDK基本上都是闭源的，因为公司不能把自己的机密泄露出去。所以当需要给别人提供SDK但不让他们知道代码的实现时就需要封装成静态库。</p><p>静态库有<code>.a</code>库和<code>.framework</code>库，苹果官方更建议我们使用<code>.framework</code>库，因为其更加强大。</p><blockquote><p>.a是一个纯二进制文件，.framework中除了有二进制文件之外还有资源文件。<br>.a文件不能直接使用，至少要有.h文件配合，.framework文件可以直接使用。<br>.a + .h + sourceFile = .framework。</p></blockquote><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>参考这篇博客： <a href="http://www.cocoachina.com/ios/20150127/11022.html" rel="external nofollow noopener noreferrer" target="_blank">iOS开发——创建你自己的Framework</a> 讲解的非常详细。</p><p>总结一下步骤：</p><ol><li>创建工程，最好是起名为xxxDemo例如AXKitDemo，然后新建一个target名为AXKit，并把原来的工程改名为AXKit。（为了方便在demo中调试静态库）</li><li>新建一个target，选择类型为framework。</li><li>在framework中创建需要封装的类，写好代码。</li><li>在<code>Build Setting</code>里更改参数，<code>Math-O Type</code>为<code>Static Library</code>。</li><li>在<code>Build Phases -&gt; Headers</code>里将需要暴露出来的头文件从<code>Project</code>移动到<code>Public</code>。</li><li>添加一个<code>Aggregate</code>的target，并添加运行脚本。目的是把编译出来的真机版和模拟器版的framework合并。</li><li>模拟器编译一下，真机编译一下，然后<code>Aggregate</code>编译一下，然后在项目的<code>Products</code>文件夹里就有了最终生成的静态库。</li></ol><p><code>Aggregate</code>的Run Script脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;ACTION&#125;</span>"</span> = <span class="string">"build"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">INSTALL_DIR=<span class="variable">$&#123;SRCROOT&#125;</span>/Products/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line">DEVICE_DIR=<span class="variable">$&#123;BUILD_ROOT&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphoneos/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line">SIMULATOR_DIR=<span class="variable">$&#123;BUILD_ROOT&#125;</span>/<span class="variable">$&#123;CONFIGURATION&#125;</span>-iphonesimulator/<span class="variable">$&#123;PROJECT_NAME&#125;</span>.framework</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">rm -rf <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">mkdir -p <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">cp -R <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>/"</span> <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>/"</span></span><br><span class="line"><span class="comment">#ditto "$&#123;DEVICE_DIR&#125;/Headers" "$&#123;INSTALL_DIR&#125;/Headers"</span></span><br><span class="line"></span><br><span class="line">lipo -create <span class="string">"<span class="variable">$&#123;DEVICE_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span> <span class="string">"<span class="variable">$&#123;SIMULATOR_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span> -output <span class="string">"<span class="variable">$&#123;INSTALL_DIR&#125;</span>/<span class="variable">$&#123;PROJECT_NAME&#125;</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#open "$&#123;DEVICE_DIR&#125;"</span></span><br><span class="line"><span class="comment">#open "$&#123;SRCROOT&#125;/Products"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 静态库 </tag>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 UIImageView 指定点取色</title>
      <link href="/blog/2016-09-14-get-color/"/>
      <url>/blog/2016-09-14-get-color/</url>
      
        <content type="html"><![CDATA[<p>开发中有时候会遇到这样的需求，要给用户一个取色板，让用户从中自由地选取颜色，用来改变主题或者控制灯具的颜色等。这时候我们就需要获取一个视图的指定坐标的颜色值。</p><a id="more"></a><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有时候我们可能会需要一个取色器，例如我的蓝牙灯项目，让用户从一个取色器中随意取色：</p><p><img src="https://cdn.jsdelivr.net/gh/xaoxuu/volantis@1.0/img/qq/亲亲.gif" data-original="https://raw.githubusercontent.com/xaoxuu/UIImageView-GetColor/master/Resources/2016-05-20 21_00_39.gif" alt=""></p><p>那么如何从一个图片中取色呢？ <a href="https://stackoverflow.com/questions/3773245/simple-way-to-read-pixel-color-values-from-an-png-image-on-the-iphone" rel="external nofollow noopener noreferrer" target="_blank">Stack Overflow</a> 已经有大神给出了核心代码，这段代码是对<code>UIImage</code>的扩展，使用起来还不是很方便。于是我根据需求确定了接口：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 从圆形范围内的指定点获取UIColor对象，并在block中执行操作</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param point      指定坐标点</span></span><br><span class="line"><span class="comment"> @param completion 取色完成后执行的block</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="keyword">void</span>)ax_getColorFromCircleWithPoint:(<span class="built_in">CGPoint</span>)point completion:(<span class="keyword">void</span> (^)(<span class="built_in">UIColor</span> *color))completion;</span><br></pre></td></tr></table></figure><p>调用起来应该是这样的：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line">[imageView ax_getColorFromCircleWithPoint:point completion:^(<span class="built_in">UIColor</span> *color)&#123;</span><br><span class="line">  <span class="comment">// 在这里直接用color</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>因为取色板一般是圆形的，如果坐标点超出了圆形但依然在imageView的frame内，可能会返回一些用户不期望的结果，用block巧妙地解决了这一问题，超出范围就不再有回调。如果你认为我的封装使用起来更加方便，可以继续阅读下面详细内容。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>推荐CocoaPods方式，在podfile中添加一行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'AXKit'</span></span><br></pre></td></tr></table></figure><p>然后在终端中执行<code>pod install</code>即可完成安装。</p><p>AXKit的全局头文件是：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过CocoaPods或静态库方式安装</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">&lt;AXKit/AXKit.h&gt;</span></span></span><br><span class="line"><span class="comment">// 通过手动方式</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"AXKit.h"</span></span></span><br></pre></td></tr></table></figure><h2 id="接口声明"><a href="#接口声明" class="headerlink" title="接口声明"></a>接口声明</h2><h3 id="从指定点获取RGBA值"><a href="#从指定点获取RGBA值" class="headerlink" title="从指定点获取RGBA值"></a>从指定点获取RGBA值</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)ax_getRed:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)red green:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)green blue:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)blue alpha:(<span class="keyword">nullable</span> <span class="built_in">CGFloat</span> *)alpha withPoint:(<span class="built_in">CGPoint</span>)point;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用起来是这样的：</span></span><br><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line"><span class="built_in">CGFloat</span> r,g,b,a;</span><br><span class="line">[imageView ax_getRed:&amp;r green:&amp;g blue:&amp;b alpha:&amp;a withPoint:point];</span><br><span class="line"><span class="comment">// 然后r/g/b/a就有了值</span></span><br></pre></td></tr></table></figure><p>需要自己创建变量，然后把地址传进去，然后才能用，不推荐直接使用。</p><h3 id="从指定点获取RGBA值，并在block中执行操作"><a href="#从指定点获取RGBA值，并在block中执行操作" class="headerlink" title="从指定点获取RGBA值，并在block中执行操作"></a>从指定点获取RGBA值，并在block中执行操作</h3><p>加了一个block，调用起来就方便许多：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)ax_getRGBAWithPoint:(<span class="built_in">CGPoint</span>)point completion:(<span class="keyword">void</span>(^)(<span class="built_in">CGFloat</span> red,<span class="built_in">CGFloat</span> green,<span class="built_in">CGFloat</span> blue,<span class="built_in">CGFloat</span> alpha))completion;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用起来是这样的：</span></span><br><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line">[imageView ax_getRGBAWithPoint:point completion:^(<span class="built_in">CGFloat</span> red,<span class="built_in">CGFloat</span> green,<span class="built_in">CGFloat</span> blue,<span class="built_in">CGFloat</span> alpha)&#123;</span><br><span class="line">  <span class="comment">// 在这里直接用red/green/blue/alpha</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>优点是不需要自己创建变量，直接调用方法，在block回调里直接获得red/green/blue/alpha值。</p><blockquote><p>但是，很多时候，我们用的取色器是圆形的，就需要再进行一点封装。</p></blockquote><h3 id="从圆形范围内的指定点获取RGBA值，并在block中执行操作"><a href="#从圆形范围内的指定点获取RGBA值，并在block中执行操作" class="headerlink" title="从圆形范围内的指定点获取RGBA值，并在block中执行操作"></a>从圆形范围内的指定点获取RGBA值，并在block中执行操作</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)ax_getRGBAFromCircleWithPoint:(<span class="built_in">CGPoint</span>)point completion:(<span class="keyword">void</span> (^)(<span class="built_in">CGFloat</span> red,<span class="built_in">CGFloat</span> green,<span class="built_in">CGFloat</span> blue,<span class="built_in">CGFloat</span> alpha))completion;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用起来是这样的：</span></span><br><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line">[imageView ax_getRGBAFromCircleWithPoint:point completion:^(<span class="built_in">CGFloat</span> red,<span class="built_in">CGFloat</span> green,<span class="built_in">CGFloat</span> blue,<span class="built_in">CGFloat</span> alpha)&#123;</span><br><span class="line">  <span class="comment">// 在这里直接用red/green/blue/alpha</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>跟第2种调用方法一模一样，但是区别是超出圆形范围之后就不再执行block回调了，这是一种<strong>安全</strong>的做法。如果不用block方式，那么即使超出了圆形范围，也一定会返回对应的rgba值，会造成不想要的后果。</p><blockquote><p>block的回调机制巧妙地解决了这个问题。</p></blockquote><p>如果我想直接获得一个UIColor对象呢，跟获取RGBA一样有三种方法。</p><h3 id="从指定点获取UIColor对象"><a href="#从指定点获取UIColor对象" class="headerlink" title="从指定点获取UIColor对象"></a>从指定点获取UIColor对象</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">UIColor</span> *)ax_getColorWithPoint:(<span class="built_in">CGPoint</span>)point;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用起来是这样的：</span></span><br><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line"><span class="built_in">UIColor</span> *color = [imageView ax_getColorWithPoint:point];</span><br><span class="line"><span class="comment">// 获得UIColor对象</span></span><br></pre></td></tr></table></figure><p>由声明可以看出来，返回的值是一个可空类型，因此这跟第一种方法一样是<strong>不安全</strong>的。</p><h3 id="从指定点获取UIColor对象，并在block中执行操作"><a href="#从指定点获取UIColor对象，并在block中执行操作" class="headerlink" title="从指定点获取UIColor对象，并在block中执行操作"></a>从指定点获取UIColor对象，并在block中执行操作</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)ax_getColorWithPoint:(<span class="built_in">CGPoint</span>)point completion:(<span class="keyword">void</span>(^)(<span class="built_in">UIColor</span> *color))completion;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用起来是这样的：</span></span><br><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line">[imageView ax_getColorWithPoint:point completion:^(<span class="built_in">UIColor</span> *color)&#123;</span><br><span class="line">  <span class="comment">// 在这里直接用color</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>这种方法比第4种要方便一些，如果超出UIImageView的时候就不执行block里的代码。</p><h3 id="从圆形范围内的指定点获取UIColor对象，并在block中执行操作"><a href="#从圆形范围内的指定点获取UIColor对象，并在block中执行操作" class="headerlink" title="从圆形范围内的指定点获取UIColor对象，并在block中执行操作"></a>从圆形范围内的指定点获取UIColor对象，并在block中执行操作</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)ax_getColorFromCircleWithPoint:(<span class="built_in">CGPoint</span>)point completion:(<span class="keyword">void</span> (^)(<span class="built_in">UIColor</span> *color))completion;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用起来是这样的：</span></span><br><span class="line"><span class="comment">// 已知imageView、point</span></span><br><span class="line">[imageView ax_getColorFromCircleWithPoint:point completion:^(<span class="built_in">UIColor</span> *color)&#123;</span><br><span class="line">  <span class="comment">// 在这里直接用color</span></span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>引言中的Demo用的就是这一种方法，在圆形取色器中取色，既方便又安全。</p><blockquote><p>相关资料：<br><a href="https://stackoverflow.com/questions/3773245/simple-way-to-read-pixel-color-values-from-an-png-image-on-the-iphone" rel="external nofollow noopener noreferrer" target="_blank">Simple way to read pixel color values from an PNG image on the iPhone?</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 开源库 </tag>
            
            <tag> AXKit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS 链式封装，更优雅地存取沙盒文件</title>
      <link href="/blog/2016-09-12-sandbox/"/>
      <url>/blog/2016-09-12-sandbox/</url>
      
        <content type="html"><![CDATA[<p>假如你需要把一个字典或者别的什么东西保存到沙盒里，你准备怎么做？也许你已经条件反射的想到了操作步骤……其实，你可以不必每次都那么老老实实的把每一步写出来，一行代码就可以了：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@"文件名"</span>.cachePath.save(要保存的内容);</span><br></pre></td></tr></table></figure><p>本质上就是把沙盒文件操作简化为：【路径+保存文件】两个关键点，组成一条链式语法。</p><a id="more"></a><h2 id="接入AXKit"><a href="#接入AXKit" class="headerlink" title="接入AXKit"></a>接入AXKit</h2><p>如果你的项目里还没有AXKit，可以在pod文件里添加一条<code>pod &#39;AXKit&#39;</code>进行接入，也可移步至 <a href="https://xaoxuu.com/wiki/axkit">AXKit在线文档</a> 查看详细的安装和使用方法。</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>我封装了几个常用的沙盒路径，如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)mainBundlePath; <span class="comment">// mainBundlePath就是主工程项目里的文件路径</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)docPath; <span class="comment">// 文档，iTunes会备份，适合保存重要的数据</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)cachePath; <span class="comment">// 缓存，iTunes不会备份，适合保存不太重要的较大的数据</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)tempPath; <span class="comment">// 临时文件，iTunes不会备份，系统空闲时会自动删除，设备重启时也会删除</span></span><br></pre></td></tr></table></figure><p>除此之外，还提供了所有的路径，通过枚举的方式获取：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *(^)(<span class="built_in">NSSearchPathDirectory</span>))path; <span class="comment">// 传入NSSearchPathDirectory枚举就可得到路径</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>在沙盒的文档路径里有个叫<code>abc.plist</code>的文件，它的描述就是：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@"abc.plist"</span>.docPath;</span><br></pre></td></tr></table></figure><h3 id="路径的拼接"><a href="#路径的拼接" class="headerlink" title="路径的拼接"></a>路径的拼接</h3><p>任何一个字符串都可以使用<code>.append()</code>进行拼接。</p><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>保存的方法目前提供有四个：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>(^)(<span class="keyword">id</span>))savePlist;</span><br><span class="line">- (<span class="built_in">BOOL</span>(^)(<span class="built_in">NSObject</span>&lt;<span class="built_in">NSCoding</span>&gt; *))saveArchivedPlist;</span><br><span class="line">- (<span class="built_in">BOOL</span>(^)(<span class="built_in">NSObject</span>&lt;<span class="built_in">NSCoding</span>&gt; *))saveArchivedObject;</span><br><span class="line">- (<span class="built_in">BOOL</span>(^)(<span class="keyword">id</span> &lt;<span class="built_in">NSCoding</span>&gt;))save;</span><br></pre></td></tr></table></figure><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ol><li><p>在doc路径下保存一个名为”arr.plist”的文件：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *arr = [<span class="built_in">NSArray</span> array];</span><br><span class="line"><span class="built_in">BOOL</span> result = <span class="string">@"arr"</span>.docPath.savePlist(arr);</span><br></pre></td></tr></table></figure></li><li><p>在cache路径下归档一个名为”myfile.plist”的文件：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MyProfiles *myfile = [[MyProfiles alloc] init];</span><br><span class="line"><span class="comment">// MyProfiles类需实现NSCoding协议</span></span><br><span class="line"><span class="built_in">BOOL</span> result = <span class="string">@"myfile"</span>.cachePath.saveArchivedPlist(myfile);</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>读取的方法目前提供了七个：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">NSArray</span> *)readArray;</span><br><span class="line">- (<span class="keyword">nullable</span> __kindof <span class="built_in">NSDictionary</span> *)readDictionary;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)readArchivedPlist;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)readJson;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)readTxt;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)readArchivedFile;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)readArchivedObject;</span><br></pre></td></tr></table></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><ol><li><p>在doc路径下读取一个名为”arr.plist”的文件：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *arr = <span class="string">@"arr"</span>.docPath.readArray;</span><br></pre></td></tr></table></figure></li><li><p>在cache路径下解档一个名为”myfile.plist”的文件：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyProfiles *myfile = <span class="string">@"myfile"</span>.cachePath.readArchivedPlist;</span><br></pre></td></tr></table></figure><p>​</p></li></ol><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>遍历路径下所有文件</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取doc/myDir 路径下所有的扩展名为"plist"文件路径</span></span><br><span class="line"><span class="built_in">NSArray</span> *paths = <span class="string">@"myDir"</span>.docPath.subpaths(<span class="string">@"plist"</span>);</span><br><span class="line"><span class="comment">// 如果传入值为空，则不区分扩展名获取所有文件路径</span></span><br><span class="line"><span class="built_in">NSArray</span> *paths2 = <span class="string">@"myDir"</span>.docPath.subpaths(<span class="string">@""</span>);</span><br><span class="line"><span class="comment">// paths里面装的是doc/myDir路径下的所有文件完整路径</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>结构：【路径+删除】</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)removePlist;</span><br><span class="line">- (<span class="built_in">BOOL</span>)removeJson;</span><br><span class="line">- (<span class="built_in">BOOL</span>)removeTxt;</span><br><span class="line">- (<span class="built_in">BOOL</span>)remove;</span><br></pre></td></tr></table></figure><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><ol><li><p>在doc路径下删除一个名为”arr.plist”的文件：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> result = <span class="string">@"arr.plist"</span>.docPath.remove;</span><br></pre></td></tr></table></figure></li><li><p>在cache路径下删除一个名为”myfile.plist”的文件：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyProfiles *myfile = <span class="string">@"myfile.plist"</span>.cachePath.remove;</span><br></pre></td></tr></table></figure></li></ol><h2 id="详细文档"><a href="#详细文档" class="headerlink" title="详细文档"></a>详细文档</h2><p>详细请看 <a href="https://xaoxuu.com/wiki/axkit/">文档</a> 。</p>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> 开源库 </tag>
            
            <tag> AXKit </tag>
            
            <tag> sandbox </tag>
            
            <tag> 沙盒 </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何发布源码到 CocoaPods</title>
      <link href="/blog/2016-08-11-cocoapods/"/>
      <url>/blog/2016-08-11-cocoapods/</url>
      
        <content type="html"><![CDATA[<p>说实在话，类似的教程网上很多，基本可以满足大多数人零基础发布CocoaPods，但是其中可能会遇到一些问题，只有亲自尝试过才知道。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="1-clone远程仓库到本地"><a href="#1-clone远程仓库到本地" class="headerlink" title="1. clone远程仓库到本地"></a>1. clone远程仓库到本地</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> 你的仓库链接</span><br></pre></td></tr></table></figure><h3 id="2-注册trunk"><a href="#2-注册trunk" class="headerlink" title="2. 注册trunk"></a>2. 注册trunk</h3><p>注册的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk register 你的邮箱 你的用户名</span><br></pre></td></tr></table></figure><p>记得去邮箱里验证，然后可以输入以下命令查看个人信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk me</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-创建-podspec"><a href="#1-创建-podspec" class="headerlink" title="1. 创建.podspec"></a>1. 创建.podspec</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec create AXKit</span><br></pre></td></tr></table></figure><h3 id="2-修改-podspec并验证"><a href="#2-修改-podspec并验证" class="headerlink" title="2. 修改.podspec并验证"></a>2. 修改.podspec并验证</h3><p>有很多类似的教程，可以参考。</p><blockquote><p>一个小技巧：你可以去GItHub搜索一些热门的第三方库，然后点击查看这些大牛的 <code>.podspec</code> 是怎么写的。<br>传送门：<a href="https://github.com/ibireme/YYKit/blob/master/YYKit.podspec" rel="external nofollow noopener noreferrer" target="_blank">YYKit的podspec</a>、<a href="https://github.com/ReactiveCocoa/ReactiveObjC/blob/master/ReactiveObjC.podspec" rel="external nofollow noopener noreferrer" target="_blank">ReactiveObjC的podspec</a>、<a href="https://github.com/BlocksKit/BlocksKit/blob/master/BlocksKit.podspec" rel="external nofollow noopener noreferrer" target="_blank">BlocksKit的podspec</a></p></blockquote><p>最容易出错的地方就是资源路径</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.source_files = <span class="string">"AXKit/**/*.&#123;h,m&#125;"</span></span><br></pre></td></tr></table></figure><p>常见写法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Directory1/*"</span>  表示匹配所有文件</span><br><span class="line"><span class="string">"Directory1/Directory2/*.&#123;h,m&#125;"</span>  表示匹配所有以.h和.m结尾的文件</span><br><span class="line"><span class="string">"Directory1/**/*.h"</span>  表示匹配所有子目录</span><br></pre></td></tr></table></figure><p>s.source 常见写法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐写法：与版本号绑定</span></span><br><span class="line">s.source = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/TeaseTian/HTQRCode.git"</span>, <span class="symbol">:tag</span> =&gt; <span class="string">"<span class="subst">#&#123;s.version&#125;</span>"</span> &#125;</span><br><span class="line"><span class="comment"># 与commit id 绑定</span></span><br><span class="line">s.source = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/TeaseTian/HTQRCode.git"</span>, <span class="symbol">:commit</span> =&gt; <span class="string">"68defea"</span> &#125;</span><br></pre></td></tr></table></figure><p>tag =&gt; s.version 表示将这个Pod版本与Git仓库中相同版本的comit绑定<br><strong>注意：</strong>如果仓库中对应的tag是 <code>“v1.0.0”</code> 这样以字母开头的，可以在 <code>#{s.version}</code> 前面加上对应的字母。commit =&gt; “68defea” 表示将这个Pod版本与Git仓库中某个commit绑定</p><p><strong>验证</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod spec lint AXKit.podspec</span><br></pre></td></tr></table></figure><h3 id="3-上传到远程仓库"><a href="#3-上传到远程仓库" class="headerlink" title="3. 上传到远程仓库"></a>3. 上传到远程仓库</h3><p>修改.podspec时指定的版本号，如 <code>0.0.1</code>。那么远程仓库中必须始终存在这个版本的 <code>branch</code> 或 <code>tag</code> 才能够下载。建议使用tag。<code>s.source</code> 中的tag需要与远程仓库中的tag对应起来。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.version = <span class="string">"0.0.1"</span></span><br><span class="line">s.source  = &#123; <span class="symbol">:git</span> =&gt; <span class="string">"https://github.com/xaoxuu/AXKit.git"</span>, <span class="symbol">:tag</span> =&gt; <span class="string">"v<span class="subst">#&#123;s.version&#125;</span>"</span> &#125;</span><br></pre></td></tr></table></figure><p>这里指向的是 <code>&quot;v0.0.1&quot;</code> 这个分支，因为分支我们用完之后习惯把它删掉，所以这里也可以指向tag，也就是说打一个 <code>&quot;v0.0.1&quot;</code> 的tag并推送到远程就可以了。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">v0</span>.<span class="number">0.1</span></span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><p>这样做的好处就是删掉当前分支不影响CocoaPods中指向的仓库源码，对git命令不熟悉可以参考<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="external nofollow noopener noreferrer" target="_blank">廖雪峰的git教程</a>。</p><h3 id="4-发布到CocoaPods"><a href="#4-发布到CocoaPods" class="headerlink" title="4. 发布到CocoaPods"></a>4. 发布到CocoaPods</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">pod</span> trunk <span class="keyword">push </span>AXKit.podspec</span><br></pre></td></tr></table></figure><h3 id="n-删除一个podspec版本"><a href="#n-删除一个podspec版本" class="headerlink" title="n. 删除一个podspec版本"></a>n. 删除一个podspec版本</h3><p>删除的命令是：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk <span class="keyword">delete</span> 项目名 版本号</span><br></pre></td></tr></table></figure><p>官方建议使用 <code>deprecate</code> 来弃用</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">pod</span> trunk deprecate 项目名</span><br></pre></td></tr></table></figure><p>这两种方法执行完有很大几率会出现一串很长很长的错误，不要着急，这实际上这是一个html。把它保存到一个html文件中，打开，是个404错误页。所以要翻墙喽，如果你没有VPN代理工具，可以去下载<a href="https://github.com/getlantern/download/wiki" rel="external nofollow noopener noreferrer" target="_blank">Lantern</a>。</p><blockquote><p>删除之后立即搜索还是能搜到的，因为有一定的延迟，可能要半个小时才能更新。</p></blockquote><h3 id="pod-trunk-命令"><a href="#pod-trunk-命令" class="headerlink" title="pod trunk 命令"></a>pod trunk 命令</h3><p>在终端输入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod trunk <span class="comment">--help</span></span><br></pre></td></tr></table></figure><p>可以查看帮助</p><h2 id="使用脚本"><a href="#使用脚本" class="headerlink" title="使用脚本"></a>使用脚本</h2><p>没必要每次都重复每个步骤，如果你已经发布过一个，可以省去注册的步骤，直接把已经发不过的podspec复制一份，改一下仓库模块名，验证通过就可以发布了。</p><p>我写了一个便于发布更新的脚本，把脚本放在与podspec同级目录下，当你更新了项目之后，如果需要更新到cocoapods，可以执行此脚本。流程是：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入版本号<span class="function"> -&gt;</span> commit、push tag<span class="function"> -&gt;</span> pod spec lint<span class="function"> -&gt;</span> 询问是否发布<span class="function"><span class="params">(y/n)</span> -&gt;</span> 发布(y)</span><br></pre></td></tr></table></figure><blockquote><p>脚本的项目在这里：<a href="https://github.com/xaoxuu/podspec.sh" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/xaoxuu/podspec.sh</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactiveCocoa 初探</title>
      <link href="/blog/2016-07-20-reactive-cocoa/"/>
      <url>/blog/2016-07-20-reactive-cocoa/</url>
      
        <content type="html"><![CDATA[<h2 id="关于RAC"><a href="#关于RAC" class="headerlink" title="关于RAC"></a>关于RAC</h2><p>RAC是 <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" rel="external nofollow noopener noreferrer" target="_blank">GitHub开源的ReactiveCocoa框架</a> 。<br>RAC简化代码，使一个功能的代码集中到一起，提高了代码聚合性。 <a href="https://baike.baidu.com/item/高内聚低耦合?fr=aladdin" rel="external nofollow noopener noreferrer" target="_blank">(高内聚，低耦合)</a></p><a id="more"></a><p>安装：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod <span class="string">'ReactiveCocoa'</span></span><br></pre></td></tr></table></figure><p></p><p>导入头文件<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;ReactiveCocoa/ReactiveCocoa.h&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>代替代理（更少代码）<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rac_signalForSelector:</span><br></pre></td></tr></table></figure><p></p><p>代替KVO<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rac_valuesAndChangesForKeyPath:</span><br></pre></td></tr></table></figure><p></p><p>监听事件（用于MVVM）<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rac_signalForControllerEvents:</span><br></pre></td></tr></table></figure><p></p><p>代替通知（自动remove）<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rac_addObserverForName:</span><br></pre></td></tr></table></figure><p></p><p>监听文本框内容改变<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rac_textSignal:</span><br></pre></td></tr></table></figure><p></p><p>处理当界面有多次请求时，需要都获取到数据时，才能展示界面<br></p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- rac_liftSelector:WithSignalFromArray:Signals:</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> ReactiveCocoa </tag>
            
            <tag> 响应式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 常用命令以及相关资料</title>
      <link href="/blog/2016-06-07-git/"/>
      <url>/blog/2016-06-07-git/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相关资料：<br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" rel="external nofollow noopener noreferrer" target="_blank">廖雪峰教程链接</a><br><a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" rel="external nofollow noopener noreferrer" target="_blank">Git远程操作详解</a><br><a href="https://blog.zengrong.net/post/1746.html" rel="external nofollow noopener noreferrer" target="_blank">Git查看、删除、重命名远程分支和tag</a></p></blockquote><a id="more"></a><h2 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h2><p>日常使用git更新提交代码的一般流程是这样的：</p><ol><li>在对代码进行了一些修改之后，使用：<code>git add --all</code>将本地所有新增文件添加进版本库。</li><li>使用：<code>git commit -m 备注</code>将代码提交到本地版本库。（备注内容没有空格的话不需要加引号）</li><li>使用：<code>git pull origin</code>从服务器拉取代码，更新本地版本库。</li><li>使用：<code>git push origin</code>将本地版本库推送到服务器。</li></ol><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><h3 id="创建并切换-branch"><a href="#创建并切换-branch" class="headerlink" title="创建并切换 branch"></a>创建并切换 branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h3 id="仅仅切换-branch"><a href="#仅仅切换-branch" class="headerlink" title="仅仅切换 branch"></a>仅仅切换 branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><h3 id="创建-tag"><a href="#创建-tag" class="headerlink" title="创建 tag"></a>创建 tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag 标签名</span><br></pre></td></tr></table></figure><h3 id="创建-tag-并备注-备注信息加不加双引号都可以"><a href="#创建-tag-并备注-备注信息加不加双引号都可以" class="headerlink" title="创建 tag 并备注(备注信息加不加双引号都可以)"></a>创建 tag 并备注(备注信息加不加双引号都可以)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a 标签名 -m 备注信息</span><br></pre></td></tr></table></figure><h3 id="创建PGP-tag-并备注"><a href="#创建PGP-tag-并备注" class="headerlink" title="创建PGP tag 并备注"></a>创建PGP tag 并备注</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -s 标签名 -m 备注信息</span><br></pre></td></tr></table></figure><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><h3 id="查看本地-branch-list"><a href="#查看本地-branch-list" class="headerlink" title="查看本地 branch list"></a>查看本地 branch list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h3 id="查看远程-branch-list"><a href="#查看远程-branch-list" class="headerlink" title="查看远程 branch list"></a>查看远程 branch list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -r 分支名</span><br></pre></td></tr></table></figure><h3 id="查看所有-branch-list"><a href="#查看所有-branch-list" class="headerlink" title="查看所有 branch list"></a>查看所有 branch list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a 分支名</span><br></pre></td></tr></table></figure><h3 id="查看本地-tag"><a href="#查看本地-tag" class="headerlink" title="查看本地 tag"></a>查看本地 tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h3 id="查看某个本地-tag-详情"><a href="#查看某个本地-tag-详情" class="headerlink" title="查看某个本地 tag 详情"></a>查看某个本地 tag 详情</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show 标签名</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><h3 id="删除本地-branch-tag"><a href="#删除本地-branch-tag" class="headerlink" title="删除本地 branch / tag"></a>删除本地 branch / tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d 分支名或标签名</span><br></pre></td></tr></table></figure><h3 id="删除所有未推送的本地-branch"><a href="#删除所有未推送的本地-branch" class="headerlink" title="删除所有未推送的本地 branch"></a>删除所有未推送的本地 branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h3 id="仅仅删除某个远程-branch-tag"><a href="#仅仅删除某个远程-branch-tag" class="headerlink" title="仅仅删除某个远程 branch / tag"></a>仅仅删除某个远程 branch / tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :分支名或标签名</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git push origin --delete 分支名或标签名</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><h3 id="推送某个-branch-tag"><a href="#推送某个-branch-tag" class="headerlink" title="推送某个 branch / tag"></a>推送某个 branch / tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin 分支名或标签名</span><br></pre></td></tr></table></figure><h3 id="推送所有-branch"><a href="#推送所有-branch" class="headerlink" title="推送所有 branch"></a>推送所有 branch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --all origin</span><br></pre></td></tr></table></figure><h3 id="推送所有-tag"><a href="#推送所有-tag" class="headerlink" title="推送所有 tag"></a>推送所有 tag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>重命名本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m 旧分支名 新分支名</span><br></pre></td></tr></table></figure><p>重命名远程分支需要分三步操作</p><ol><li>删除远程分支</li><li>重命名本地分支</li><li>推送本地分支</li></ol><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><h3 id="soft-（默认）"><a href="#soft-（默认）" class="headerlink" title="soft （默认）"></a>soft （默认）</h3><p>只回滚到某个commit，本地代码不变 (不加–soft或–hard默认为–soft)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft 分支名或标签名</span><br></pre></td></tr></table></figure><h3 id="hard"><a href="#hard" class="headerlink" title="hard"></a>hard</h3><p>彻底回滚（commit和本地代码都回滚）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard 分支名或标签名</span><br></pre></td></tr></table></figure><h2 id="下载、合并分支"><a href="#下载、合并分支" class="headerlink" title="下载、合并分支"></a>下载、合并分支</h2><p>合并某本地分支到当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名</span><br></pre></td></tr></table></figure><p>合并某远程分支到当前分支 <code>直接合并，慎用</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin 远程分支名</span><br></pre></td></tr></table></figure><p>下载某个远程标签</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin tag 远程标签名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十万蝼蚁不如一个巨人</title>
      <link href="/blog/2016-05-22-its-better-to-be-a-titan/"/>
      <url>/blog/2016-05-22-its-better-to-be-a-titan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>混乱不是深渊。<br>混乱是阶梯。<br>很多人想往上爬 却失败了<br>且永无机会再试。<br>他们坠落而亡。<br>有人本有机会攀爬，<br>但他们拒绝了。<br>他们守着王国不放<br>守着诸神<br>守着爱情<br>尽皆幻想。<br>唯有阶梯是真实存在。<br>攀爬才是生活的全部。<br>—— Game of Thrones</p></blockquote><a id="more"></a><h2 id="物竞天择"><a href="#物竞天择" class="headerlink" title="物竞天择"></a>物竞天择</h2><p>世界是残酷的，强者以弱者为食。</p><h2 id="个体意识"><a href="#个体意识" class="headerlink" title="个体意识"></a>个体意识</h2><p>每个人都是一个独立的个体，群众的力量再强大，他们也不属于你，只是在某些时刻能够帮到你。<br>与其成为一个强大群体中微不足道的一员，不如成为一个强大的个体。</p><h2 id="群体意识"><a href="#群体意识" class="headerlink" title="群体意识"></a>群体意识</h2><p>社会不需要太多巨人，需要团结在一起才能发挥威力的蚂蚁一族。像牧羊一样，管好头羊，其他都会乖乖跟着头羊，即使有不听话的，也不会威胁到牧羊人。<br>但如果羊羔中有几个或更多比牧羊人掌管的头羊更加强壮的个体，牧羊人就会地位不保。这些羊羔如果足够聪明的话，是不应该过早展露实力的，冲动的结局则是变成一桌美食。</p><h2 id="珍惜当下"><a href="#珍惜当下" class="headerlink" title="珍惜当下"></a>珍惜当下</h2><p>活着本来就是如临深渊，如履薄冰，永远不能保证下一刻不会遭遇意外。<br>每天早上睁开眼能够看到熟悉的世界，能够记得自己走过的人生，都值得庆幸。<br>不做别人的棋子，更不教育自己的后代如何做好这一颗棋子，生活是你自己的。</p><h2 id="时间、效率、实力"><a href="#时间、效率、实力" class="headerlink" title="时间、效率、实力"></a>时间、效率、实力</h2><p>我一直把时间作为衡量价值的标准，因为只有时间是有限的、平等的。<br>效率则是将时间转化成实力的最关键一步，是靠自己的努力获得的，谁也赠予不了，谁也偷不了。<br>实力则是我的人生观中的价值所在，也是唯一的追求。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>你可以选择随遇而安，只需要一双发现美的眼睛和积极乐观的心态。</p><p>也可以攀爬，你会发现到处都是陷阱，一步跌落，就是万丈深渊。<br>哪怕你认为现在的处境已经跌落人生谷底，但是事实是前方依然会有更深的陷阱在等着你。</p><blockquote><p>我已经做出了我的选择。<br>—— 2016.05.22</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS10.12 最新版 CocoaPods 的安装及使用</title>
      <link href="/blog/2016-03-21-cocoapods/"/>
      <url>/blog/2016-03-21-cocoapods/</url>
      
        <content type="html"><![CDATA[<h2 id="1-移除现有Ruby默认源"><a href="#1-移除现有Ruby默认源" class="headerlink" title="1. 移除现有Ruby默认源"></a>1. 移除现有Ruby默认源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources --remove https://rubygems.org/</span><br></pre></td></tr></table></figure><h2 id="2-使用新的源"><a href="#2-使用新的源" class="headerlink" title="2. 使用新的源"></a>2. 使用新的源</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -a https://gems.ruby-china.com</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="3-验证新源是否替换成功"><a href="#3-验证新源是否替换成功" class="headerlink" title="3. 验证新源是否替换成功"></a>3. 验证新源是否替换成功</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br></pre></td></tr></table></figure><h2 id="4-更新gem"><a href="#4-更新gem" class="headerlink" title="4. 更新gem"></a>4. 更新gem</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gem update --system</span><br></pre></td></tr></table></figure><h2 id="5-安装CocoaPods"><a href="#5-安装CocoaPods" class="headerlink" title="5. 安装CocoaPods"></a>5. 安装CocoaPods</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo gem install -n /usr/<span class="built_in">local</span>/bin cocoapods</span><br><span class="line">pod setup</span><br></pre></td></tr></table></figure><h2 id="6-新建工程，并在终端用cd指令到文件夹内"><a href="#6-新建工程，并在终端用cd指令到文件夹内" class="headerlink" title="6. 新建工程，并在终端用cd指令到文件夹内"></a>6. 新建工程，并在终端用cd指令到文件夹内</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod search 某第三方库</span><br></pre></td></tr></table></figure><h2 id="7-新建Podfile文件"><a href="#7-新建Podfile文件" class="headerlink" title="7. 新建Podfile文件"></a>7. 新建Podfile文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim Podfile</span><br></pre></td></tr></table></figure><p>写入以下内容并保存：（参考）</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">platform:</span>ios, <span class="string">'9.0'</span></span><br><span class="line"></span><br><span class="line">target <span class="string">'你的项目的target'</span> <span class="keyword">do</span></span><br><span class="line">  pod <span class="string">'MJRefresh'</span>, <span class="string">'~&gt; 3.1.0'</span></span><br><span class="line">  pod <span class="string">'YYKit'</span></span><br><span class="line">  pod <span class="string">'AXKit'</span></span><br><span class="line">  pod <span class="string">'SCLAlertView-Objective-C'</span>, <span class="string">'~&gt; 1.0.3'</span></span><br><span class="line">  <span class="comment">#pod 'MJExtension', '~&gt; 3.0.10'</span></span><br><span class="line">  <span class="comment">#pod 'SDWebImage', '~&gt; 3.7.6'</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>小提示：（终端<code>vim</code>文件 按<code>i</code>可编辑 ，<code>esc</code>退出编辑，<code>:wq</code>可保存退出）</p><h2 id="8-安装第三方库到项目中"><a href="#8-安装第三方库到项目中" class="headerlink" title="8. 安装第三方库到项目中"></a>8. 安装第三方库到项目中</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod install</span><br></pre></td></tr></table></figure><p>等待安装完成，打开<code>你的项目.xcworkspace</code>即可。</p><h2 id="n-更新本地的repo"><a href="#n-更新本地的repo" class="headerlink" title="n. 更新本地的repo"></a>n. 更新本地的repo</h2><p>如果第三方库更新了，而本地已有一个旧版本，可以执行<code>pod update</code>以更新。</p>]]></content>
      
      
      <categories>
          
          <category> Cocoa Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CocoaPods </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我理想的智能生活</title>
      <link href="/blog/2016-02-11-smart-life/"/>
      <url>/blog/2016-02-11-smart-life/</url>
      
        <content type="html"><![CDATA[<h2 id="梦想"><a href="#梦想" class="headerlink" title="梦想"></a>梦想</h2><p>我从小就对”活着“的机械十分着迷，就是我们现在所说的人工智能，当我初次了解到这个概念的时候，就确定了我将奉献一生的事业。</p><p>然而梦想很遥远，遥远到我这辈子无法见证 <a href="https://baike.baidu.com/item/机械公敌/1354304?fr=aladdin&amp;fromid=9383113&amp;fromtitle=I,+Robot" rel="external nofollow noopener noreferrer" target="_blank">《I, Robot》</a> 那样的时代。</p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>梦想与生活兼得，目前唯一可选的也就智能家居了。</p><p>我坚信，不久的未来会有越来越多的东西要接入互联网，接入互联网就可以用手机控制。<br>网络就像神经，门窗联了网，门窗就活了，扫把联了网，扫把就活了。等所有的家具家电都联网的时候，就需要一个平台来管理这些智能硬件了。</p><p>所有接入互联网的传感器都成为了这个智能系统的感官，神经将这些信息传递到可以分析、处理数据的终端，经过计算后作出应答，并由这些神经传递指令到相应的智能设备上。</p><p>人与人、人与物之间的联系就更加紧密了，实时通话，远程协助都更加方便了。<br>当然，这中间涉及到的隐私和网络安全问题也十分重要，但问题总要解决，不能因噎废食。</p><p>传统硬件，将一步一步被替换为智能硬件，至少是能用手机app控制，用手机app来控制，就是一种雏形了。毕竟目前没有足够多的智能硬件，没有到需要开发一个系统的程度。</p><h2 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h2><p>现在智能硬件也越来越多了，网络也十分发达了，但是它们的”语言“不同，各厂商的产品都用自己的标准，不同厂商之间的硬件是无法协同工作的。它们需要一个协议、或者一个平台，来实现合作。平台，也许就是智能家居时代来临的一个必要条件吧。</p>]]></content>
      
      
      <categories>
          
          <category> Life </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
